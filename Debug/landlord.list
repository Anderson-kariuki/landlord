
landlord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800414c  0800414c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800414c  0800414c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800414c  0800414c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000060  080041b4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080041b4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000874a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002006  00000000  00000000  00028816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000076b  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001769e  00000000  00000000  0002b963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de04  00000000  00000000  00043001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084e77  00000000  00000000  00050e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a88  00000000  00000000  000d5c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d8704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ec8 	.word	0x08003ec8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003ec8 	.word	0x08003ec8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b29      	ldr	r3, [pc, #164]	; (8000218 <MX_GPIO_Init+0xbc>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a28      	ldr	r2, [pc, #160]	; (8000218 <MX_GPIO_Init+0xbc>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b26      	ldr	r3, [pc, #152]	; (8000218 <MX_GPIO_Init+0xbc>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b23      	ldr	r3, [pc, #140]	; (8000218 <MX_GPIO_Init+0xbc>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a22      	ldr	r2, [pc, #136]	; (8000218 <MX_GPIO_Init+0xbc>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b20      	ldr	r3, [pc, #128]	; (8000218 <MX_GPIO_Init+0xbc>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a1c      	ldr	r2, [pc, #112]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b17      	ldr	r3, [pc, #92]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a16      	ldr	r2, [pc, #88]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <MX_GPIO_Init+0xbc>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLUE_Pin|GREEN_Pin|RED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2138      	movs	r1, #56	; 0x38
 80001d4:	4811      	ldr	r0, [pc, #68]	; (800021c <MX_GPIO_Init+0xc0>)
 80001d6:	f001 fd50 	bl	8001c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|ENTER_Pin|BACK_Pin;
 80001da:	2333      	movs	r3, #51	; 0x33
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001e6:	f107 0310 	add.w	r3, r7, #16
 80001ea:	4619      	mov	r1, r3
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <MX_GPIO_Init+0xc4>)
 80001ee:	f001 fba9 	bl	8001944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin|RED_Pin;
 80001f2:	2338      	movs	r3, #56	; 0x38
 80001f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	2301      	movs	r3, #1
 80001f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fa:	2300      	movs	r3, #0
 80001fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fe:	2302      	movs	r3, #2
 8000200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	4619      	mov	r1, r3
 8000208:	4804      	ldr	r0, [pc, #16]	; (800021c <MX_GPIO_Init+0xc0>)
 800020a:	f001 fb9b 	bl	8001944 <HAL_GPIO_Init>

}
 800020e:	bf00      	nop
 8000210:	3720      	adds	r7, #32
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40021000 	.word	0x40021000
 800021c:	40010c00 	.word	0x40010c00
 8000220:	40010800 	.word	0x40010800

08000224 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <MX_I2C1_Init+0x50>)
 800022a:	4a13      	ldr	r2, [pc, #76]	; (8000278 <MX_I2C1_Init+0x54>)
 800022c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800022e:	4b11      	ldr	r3, [pc, #68]	; (8000274 <MX_I2C1_Init+0x50>)
 8000230:	4a12      	ldr	r2, [pc, #72]	; (800027c <MX_I2C1_Init+0x58>)
 8000232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <MX_I2C1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <MX_I2C1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <MX_I2C1_Init+0x50>)
 8000242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <MX_I2C1_Init+0x50>)
 8000256:	2200      	movs	r2, #0
 8000258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025a:	4b06      	ldr	r3, [pc, #24]	; (8000274 <MX_I2C1_Init+0x50>)
 800025c:	2200      	movs	r2, #0
 800025e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000260:	4804      	ldr	r0, [pc, #16]	; (8000274 <MX_I2C1_Init+0x50>)
 8000262:	f001 fd23 	bl	8001cac <HAL_I2C_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 ff14 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000007c 	.word	0x2000007c
 8000278:	40005400 	.word	0x40005400
 800027c:	000186a0 	.word	0x000186a0

08000280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000288:	f107 0314 	add.w	r3, r7, #20
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a1d      	ldr	r2, [pc, #116]	; (8000310 <HAL_I2C_MspInit+0x90>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d132      	bne.n	8000306 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a0:	4b1c      	ldr	r3, [pc, #112]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0308 	and.w	r3, r3, #8
 80002b4:	613b      	str	r3, [r7, #16]
 80002b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80002bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002be:	2312      	movs	r3, #18
 80002c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c2:	2303      	movs	r3, #3
 80002c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002c6:	f107 0314 	add.w	r3, r7, #20
 80002ca:	4619      	mov	r1, r3
 80002cc:	4812      	ldr	r0, [pc, #72]	; (8000318 <HAL_I2C_MspInit+0x98>)
 80002ce:	f001 fb39 	bl	8001944 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_I2C_MspInit+0x9c>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
 80002d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
 80002e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
 80002e8:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_I2C_MspInit+0x9c>)
 80002ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002ec:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f8:	61d3      	str	r3, [r2, #28]
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_I2C_MspInit+0x94>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000306:	bf00      	nop
 8000308:	3728      	adds	r7, #40	; 0x28
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40005400 	.word	0x40005400
 8000314:	40021000 	.word	0x40021000
 8000318:	40010c00 	.word	0x40010c00
 800031c:	40010000 	.word	0x40010000

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f001 f9a4 	bl	8001670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f826 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f7ff ff16 	bl	800015c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000330:	f7ff ff78 	bl	8000224 <MX_I2C1_Init>
  MX_RTC_Init();
 8000334:	f000 feb6 	bl	80010a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //lcd init
  lcd16x2_i2c_init(&hi2c1); //Initialize LCD
 8000338:	480c      	ldr	r0, [pc, #48]	; (800036c <main+0x4c>)
 800033a:	f001 f863 	bl	8001404 <lcd16x2_i2c_init>
  lcd16x2_i2c_1stLine();
 800033e:	f001 f8f1 	bl	8001524 <lcd16x2_i2c_1stLine>
  lcd16x2_i2c_printf("WELCOME");
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0x50>)
 8000344:	f001 f908 	bl	8001558 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 8000348:	f001 f8f4 	bl	8001534 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("VIEW MENU");
 800034c:	4809      	ldr	r0, [pc, #36]	; (8000374 <main+0x54>)
 800034e:	f001 f903 	bl	8001558 <lcd16x2_i2c_printf>
  delay(2000);
 8000352:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000356:	f001 f92f 	bl	80015b8 <delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  button_hundler();
 800035a:	f000 f86b 	bl	8000434 <button_hundler>
	  homeScreen();
 800035e:	f000 f8cd 	bl	80004fc <homeScreen>
	  sleep_mode() ;
 8000362:	f000 fe7b 	bl	800105c <sleep_mode>
	  resetButtons();
 8000366:	f000 fe5f 	bl	8001028 <resetButtons>
	  button_hundler();
 800036a:	e7f6      	b.n	800035a <main+0x3a>
 800036c:	2000007c 	.word	0x2000007c
 8000370:	08003ee0 	.word	0x08003ee0
 8000374:	08003ee8 	.word	0x08003ee8

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b094      	sub	sp, #80	; 0x50
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 f90c 	bl	80035a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80003a8:	2309      	movs	r3, #9
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b6:	2301      	movs	r3, #1
 80003b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003ba:	2301      	movs	r3, #1
 80003bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003be:	2302      	movs	r3, #2
 80003c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 fa40 	bl	8002858 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003de:	f000 fe5b 	bl	8001098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2102      	movs	r1, #2
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fcac 	bl	8002d5c <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800040a:	f000 fe45 	bl	8001098 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800040e:	2301      	movs	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000416:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fe2c 	bl	8003078 <HAL_RCCEx_PeriphCLKConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000426:	f000 fe37 	bl	8001098 <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3750      	adds	r7, #80	; 0x50
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <button_hundler>:

/* USER CODE BEGIN 4 */
void button_hundler(){
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

	  if (HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin)==0){
 8000438:	2101      	movs	r1, #1
 800043a:	4828      	ldr	r0, [pc, #160]	; (80004dc <button_hundler+0xa8>)
 800043c:	f001 fc06 	bl	8001c4c <HAL_GPIO_ReadPin>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10b      	bne.n	800045e <button_hundler+0x2a>
		  //raise up menu movement flag
		  up_flag = 1;
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <button_hundler+0xac>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
		  backlight = 1;
 800044c:	4b25      	ldr	r3, [pc, #148]	; (80004e4 <button_hundler+0xb0>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
		  button_handler_flag = 1;
 8000452:	4b25      	ldr	r3, [pc, #148]	; (80004e8 <button_hundler+0xb4>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
		  button_handler_ticks=0;
 8000458:	4b24      	ldr	r3, [pc, #144]	; (80004ec <button_hundler+0xb8>)
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]

	  }

	  if (HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin)==0){
 800045e:	2102      	movs	r1, #2
 8000460:	481e      	ldr	r0, [pc, #120]	; (80004dc <button_hundler+0xa8>)
 8000462:	f001 fbf3 	bl	8001c4c <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d10b      	bne.n	8000484 <button_hundler+0x50>
		  //raise down menu movement flag
		  down_flag = 1;
 800046c:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <button_hundler+0xbc>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
		  backlight = 1;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <button_hundler+0xb0>)
 8000474:	2201      	movs	r2, #1
 8000476:	701a      	strb	r2, [r3, #0]
		  button_handler_flag = 1;
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <button_hundler+0xb4>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
		  button_handler_ticks=0;
 800047e:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <button_hundler+0xb8>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin)==0){
 8000484:	2110      	movs	r1, #16
 8000486:	4815      	ldr	r0, [pc, #84]	; (80004dc <button_hundler+0xa8>)
 8000488:	f001 fbe0 	bl	8001c4c <HAL_GPIO_ReadPin>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d10b      	bne.n	80004aa <button_hundler+0x76>
		  //raise okey flag
		  ok_flag = 1;
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <button_hundler+0xc0>)
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
		  backlight = 1;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <button_hundler+0xb0>)
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
		  button_handler_flag = 1;
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <button_hundler+0xb4>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	701a      	strb	r2, [r3, #0]
		  button_handler_ticks=0;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <button_hundler+0xb8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_GPIO_ReadPin(BACK_GPIO_Port, BACK_Pin)==0){
 80004aa:	2120      	movs	r1, #32
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <button_hundler+0xa8>)
 80004ae:	f001 fbcd 	bl	8001c4c <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d10b      	bne.n	80004d0 <button_hundler+0x9c>
		  //raise back menu movement flag
		  back_flag = 1;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <button_hundler+0xc4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
		  backlight = 1;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <button_hundler+0xb0>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
		  button_handler_flag = 1;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <button_hundler+0xb4>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
		  button_handler_ticks=0;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <button_hundler+0xb8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
	  }
	  delay(50);
 80004d0:	2032      	movs	r0, #50	; 0x32
 80004d2:	f001 f871 	bl	80015b8 <delay>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40010800 	.word	0x40010800
 80004e0:	200000d2 	.word	0x200000d2
 80004e4:	20000000 	.word	0x20000000
 80004e8:	200000d1 	.word	0x200000d1
 80004ec:	20000118 	.word	0x20000118
 80004f0:	200000d3 	.word	0x200000d3
 80004f4:	200000d4 	.word	0x200000d4
 80004f8:	200000d5 	.word	0x200000d5

080004fc <homeScreen>:

void homeScreen() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	//	main menu screen select
	while (menu_screen) {
 8000500:	e0ce      	b.n	80006a0 <homeScreen+0x1a4>
		button_hundler();
 8000502:	f7ff ff97 	bl	8000434 <button_hundler>

		lcd16x2_i2c_clear();
 8000506:	f001 f81d 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 800050a:	f001 f80b 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("MENU");
 800050e:	489d      	ldr	r0, [pc, #628]	; (8000784 <homeScreen+0x288>)
 8000510:	f001 f822 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000514:	f001 f80e 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("ADMIN");
 8000518:	489b      	ldr	r0, [pc, #620]	; (8000788 <homeScreen+0x28c>)
 800051a:	f001 f81d 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(0, 6);
 800051e:	2106      	movs	r1, #6
 8000520:	2000      	movs	r0, #0
 8000522:	f000 ffdb 	bl	80014dc <lcd16x2_i2c_setCursor>
		lcd16x2_i2c_printf(">");
 8000526:	4899      	ldr	r0, [pc, #612]	; (800078c <homeScreen+0x290>)
 8000528:	f001 f816 	bl	8001558 <lcd16x2_i2c_printf>
		delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f001 f843 	bl	80015b8 <delay>

		if (ok_flag) {
 8000532:	4b97      	ldr	r3, [pc, #604]	; (8000790 <homeScreen+0x294>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 809d 	beq.w	8000676 <homeScreen+0x17a>
			resetButtons();
 800053c:	f000 fd74 	bl	8001028 <resetButtons>
			menu = 1;
 8000540:	4b94      	ldr	r3, [pc, #592]	; (8000794 <homeScreen+0x298>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
		}

		while (menu) {
 8000546:	e096      	b.n	8000676 <homeScreen+0x17a>
			button_hundler();
 8000548:	f7ff ff74 	bl	8000434 <button_hundler>
			if (up_flag || down_flag){
 800054c:	4b92      	ldr	r3, [pc, #584]	; (8000798 <homeScreen+0x29c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d103      	bne.n	800055c <homeScreen+0x60>
 8000554:	4b91      	ldr	r3, [pc, #580]	; (800079c <homeScreen+0x2a0>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d007      	beq.n	800056c <homeScreen+0x70>
				resetButtons();
 800055c:	f000 fd64 	bl	8001028 <resetButtons>
				a++;
 8000560:	4b8f      	ldr	r3, [pc, #572]	; (80007a0 <homeScreen+0x2a4>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b8d      	ldr	r3, [pc, #564]	; (80007a0 <homeScreen+0x2a4>)
 800056a:	701a      	strb	r2, [r3, #0]
			 }
			if(a>1){
 800056c:	4b8c      	ldr	r3, [pc, #560]	; (80007a0 <homeScreen+0x2a4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d902      	bls.n	800057a <homeScreen+0x7e>
				a=0;
 8000574:	4b8a      	ldr	r3, [pc, #552]	; (80007a0 <homeScreen+0x2a4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
			}
			if (!a){
 800057a:	4b89      	ldr	r3, [pc, #548]	; (80007a0 <homeScreen+0x2a4>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d125      	bne.n	80005ce <homeScreen+0xd2>
//				PROMPTING FOR PAYMENT SUBSCRIPTION MODE SELECTING
				lcd16x2_i2c_clear();
 8000582:	f000 ffdf 	bl	8001544 <lcd16x2_i2c_clear>
				lcd16x2_i2c_1stLine();
 8000586:	f000 ffcd 	bl	8001524 <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("SUBSCRIPTION");
 800058a:	4886      	ldr	r0, [pc, #536]	; (80007a4 <homeScreen+0x2a8>)
 800058c:	f000 ffe4 	bl	8001558 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8000590:	f000 ffd0 	bl	8001534 <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("MODE");
 8000594:	4884      	ldr	r0, [pc, #528]	; (80007a8 <homeScreen+0x2ac>)
 8000596:	f000 ffdf 	bl	8001558 <lcd16x2_i2c_printf>
				delay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f001 f80c 	bl	80015b8 <delay>

				if (ok_flag){
 80005a0:	4b7b      	ldr	r3, [pc, #492]	; (8000790 <homeScreen+0x294>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d012      	beq.n	80005ce <homeScreen+0xd2>
					resetButtons();
 80005a8:	f000 fd3e 	bl	8001028 <resetButtons>
					sub_mode_flag =1;
 80005ac:	4b7f      	ldr	r3, [pc, #508]	; (80007ac <homeScreen+0x2b0>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
				}
			}

			while (sub_mode_flag) {
 80005b2:	e00c      	b.n	80005ce <homeScreen+0xd2>
				button_hundler();
 80005b4:	f7ff ff3e 	bl	8000434 <button_hundler>
				sub_mode();
 80005b8:	f000 f9ca 	bl	8000950 <sub_mode>

				if (back_flag){
 80005bc:	4b7c      	ldr	r3, [pc, #496]	; (80007b0 <homeScreen+0x2b4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <homeScreen+0xd2>
					resetButtons();
 80005c4:	f000 fd30 	bl	8001028 <resetButtons>
					sub_mode_flag =0;
 80005c8:	4b78      	ldr	r3, [pc, #480]	; (80007ac <homeScreen+0x2b0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
			while (sub_mode_flag) {
 80005ce:	4b77      	ldr	r3, [pc, #476]	; (80007ac <homeScreen+0x2b0>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1ee      	bne.n	80005b4 <homeScreen+0xb8>
				}
			}

			if (a) {
 80005d6:	4b72      	ldr	r3, [pc, #456]	; (80007a0 <homeScreen+0x2a4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d03e      	beq.n	800065c <homeScreen+0x160>
//				prompt for your tocken balance but ideally it should be desplayed at the home screen
				lcd16x2_i2c_clear();
 80005de:	f000 ffb1 	bl	8001544 <lcd16x2_i2c_clear>
				lcd16x2_i2c_1stLine();
 80005e2:	f000 ff9f 	bl	8001524 <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("CHECK TOCKEN");
 80005e6:	4873      	ldr	r0, [pc, #460]	; (80007b4 <homeScreen+0x2b8>)
 80005e8:	f000 ffb6 	bl	8001558 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 80005ec:	f000 ffa2 	bl	8001534 <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("BALANCE");
 80005f0:	4871      	ldr	r0, [pc, #452]	; (80007b8 <homeScreen+0x2bc>)
 80005f2:	f000 ffb1 	bl	8001558 <lcd16x2_i2c_printf>
				lcd16x2_i2c_setCursor(1, 7);
 80005f6:	2107      	movs	r1, #7
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 ff6f 	bl	80014dc <lcd16x2_i2c_setCursor>
				delay(100);
 80005fe:	2064      	movs	r0, #100	; 0x64
 8000600:	f000 ffda 	bl	80015b8 <delay>

				if (ok_flag){
 8000604:	4b62      	ldr	r3, [pc, #392]	; (8000790 <homeScreen+0x294>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d027      	beq.n	800065c <homeScreen+0x160>
					resetButtons();
 800060c:	f000 fd0c 	bl	8001028 <resetButtons>
					check_balance_flag =1;
 8000610:	4b6a      	ldr	r3, [pc, #424]	; (80007bc <homeScreen+0x2c0>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
				}
			}

			while (check_balance_flag){
 8000616:	e021      	b.n	800065c <homeScreen+0x160>
//				the display for tocken balance after prompting
				button_hundler();
 8000618:	f7ff ff0c 	bl	8000434 <button_hundler>
				if (backlight){
 800061c:	4b68      	ldr	r3, [pc, #416]	; (80007c0 <homeScreen+0x2c4>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d012      	beq.n	800064a <homeScreen+0x14e>
					lcd16x2_i2c_clear();
 8000624:	f000 ff8e 	bl	8001544 <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8000628:	f000 ff7c 	bl	8001524 <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("TOCKEN");
 800062c:	4865      	ldr	r0, [pc, #404]	; (80007c4 <homeScreen+0x2c8>)
 800062e:	f000 ff93 	bl	8001558 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 8000632:	f000 ff7f 	bl	8001534 <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("BALANCE");
 8000636:	4860      	ldr	r0, [pc, #384]	; (80007b8 <homeScreen+0x2bc>)
 8000638:	f000 ff8e 	bl	8001558 <lcd16x2_i2c_printf>
					lcd16x2_i2c_setCursor(1, 7);
 800063c:	2107      	movs	r1, #7
 800063e:	2001      	movs	r0, #1
 8000640:	f000 ff4c 	bl	80014dc <lcd16x2_i2c_setCursor>
					delay(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f000 ffb7 	bl	80015b8 <delay>
				}

				if (back_flag) {
 800064a:	4b59      	ldr	r3, [pc, #356]	; (80007b0 <homeScreen+0x2b4>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <homeScreen+0x160>
					resetButtons();
 8000652:	f000 fce9 	bl	8001028 <resetButtons>
					check_balance_flag =0;
 8000656:	4b59      	ldr	r3, [pc, #356]	; (80007bc <homeScreen+0x2c0>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
			while (check_balance_flag){
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <homeScreen+0x2c0>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1d9      	bne.n	8000618 <homeScreen+0x11c>
				}
			}

			if (back_flag){
 8000664:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <homeScreen+0x2b4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d004      	beq.n	8000676 <homeScreen+0x17a>
				resetButtons();
 800066c:	f000 fcdc 	bl	8001028 <resetButtons>
				menu =0;
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <homeScreen+0x298>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
		while (menu) {
 8000676:	4b47      	ldr	r3, [pc, #284]	; (8000794 <homeScreen+0x298>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	f47f af64 	bne.w	8000548 <homeScreen+0x4c>
			}

		}

		if (up_flag || down_flag) {
 8000680:	4b45      	ldr	r3, [pc, #276]	; (8000798 <homeScreen+0x29c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d103      	bne.n	8000690 <homeScreen+0x194>
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <homeScreen+0x2a0>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d007      	beq.n	80006a0 <homeScreen+0x1a4>
			resetButtons();
 8000690:	f000 fcca 	bl	8001028 <resetButtons>
			admin_screen = 1;
 8000694:	4b4c      	ldr	r3, [pc, #304]	; (80007c8 <homeScreen+0x2cc>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
			menu_screen = 0;
 800069a:	4b4c      	ldr	r3, [pc, #304]	; (80007cc <homeScreen+0x2d0>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	while (menu_screen) {
 80006a0:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <homeScreen+0x2d0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f47f af2c 	bne.w	8000502 <homeScreen+0x6>
		}

	}

//	main admin screen select
	while (admin_screen ) {
 80006aa:	e064      	b.n	8000776 <homeScreen+0x27a>
		button_hundler();
 80006ac:	f7ff fec2 	bl	8000434 <button_hundler>

		lcd16x2_i2c_clear();
 80006b0:	f000 ff48 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 80006b4:	f000 ff36 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("ADMIN");
 80006b8:	4833      	ldr	r0, [pc, #204]	; (8000788 <homeScreen+0x28c>)
 80006ba:	f000 ff4d 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 80006be:	f000 ff39 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("MENU");
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <homeScreen+0x288>)
 80006c4:	f000 ff48 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(0, 6);
 80006c8:	2106      	movs	r1, #6
 80006ca:	2000      	movs	r0, #0
 80006cc:	f000 ff06 	bl	80014dc <lcd16x2_i2c_setCursor>
		lcd16x2_i2c_printf(">");
 80006d0:	482e      	ldr	r0, [pc, #184]	; (800078c <homeScreen+0x290>)
 80006d2:	f000 ff41 	bl	8001558 <lcd16x2_i2c_printf>
		delay(100);
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f000 ff6e 	bl	80015b8 <delay>

		if (ok_flag) {
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <homeScreen+0x294>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d034      	beq.n	800074e <homeScreen+0x252>
			resetButtons();
 80006e4:	f000 fca0 	bl	8001028 <resetButtons>
			admin = 1;
 80006e8:	4b39      	ldr	r3, [pc, #228]	; (80007d0 <homeScreen+0x2d4>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
		}

		while (admin) {
 80006ee:	e02e      	b.n	800074e <homeScreen+0x252>
//			to continue in admin mode you must enter authorisation pin and verification maybe done to the owners registered simcard
			button_hundler();
 80006f0:	f7ff fea0 	bl	8000434 <button_hundler>

			lcd16x2_i2c_clear();
 80006f4:	f000 ff26 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 80006f8:	f000 ff14 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf(" ENTER");
 80006fc:	4835      	ldr	r0, [pc, #212]	; (80007d4 <homeScreen+0x2d8>)
 80006fe:	f000 ff2b 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000702:	f000 ff17 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("  PIN");
 8000706:	4834      	ldr	r0, [pc, #208]	; (80007d8 <homeScreen+0x2dc>)
 8000708:	f000 ff26 	bl	8001558 <lcd16x2_i2c_printf>
			delay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f000 ff53 	bl	80015b8 <delay>

			//		TO CONTINUE IT SHOULD DO SO WITH SIMCARD INSERTED SO AS TO NOTIFY THE OWNER VIA SMS ELSE DISPLAY ERROR
			if (ok_flag){
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <homeScreen+0x294>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d007      	beq.n	800072a <homeScreen+0x22e>
				adm_menu = 1;
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <homeScreen+0x2e0>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
				resetButtons();
 8000720:	f000 fc82 	bl	8001028 <resetButtons>
				admin =0;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <homeScreen+0x2d4>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
			}

			if (back_flag){
 800072a:	4b21      	ldr	r3, [pc, #132]	; (80007b0 <homeScreen+0x2b4>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d009      	beq.n	8000746 <homeScreen+0x24a>
				resetButtons();
 8000732:	f000 fc79 	bl	8001028 <resetButtons>
				admin =0;
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <homeScreen+0x2d4>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
			}
			while (adm_menu){
 800073c:	e003      	b.n	8000746 <homeScreen+0x24a>
				button_hundler();
 800073e:	f7ff fe79 	bl	8000434 <button_hundler>
				adm_mode();
 8000742:	f000 f84d 	bl	80007e0 <adm_mode>
			while (adm_menu){
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <homeScreen+0x2e0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f7      	bne.n	800073e <homeScreen+0x242>
		while (admin) {
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <homeScreen+0x2d4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1cc      	bne.n	80006f0 <homeScreen+0x1f4>
			}
		}

		if (up_flag || down_flag){
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <homeScreen+0x29c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d103      	bne.n	8000766 <homeScreen+0x26a>
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <homeScreen+0x2a0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d007      	beq.n	8000776 <homeScreen+0x27a>
			resetButtons();
 8000766:	f000 fc5f 	bl	8001028 <resetButtons>
			admin_screen = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <homeScreen+0x2cc>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
			menu_screen = 1;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <homeScreen+0x2d0>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
	while (admin_screen ) {
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <homeScreen+0x2cc>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d196      	bne.n	80006ac <homeScreen+0x1b0>
		}
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08003ef4 	.word	0x08003ef4
 8000788:	08003efc 	.word	0x08003efc
 800078c:	08003f04 	.word	0x08003f04
 8000790:	200000d4 	.word	0x200000d4
 8000794:	200000da 	.word	0x200000da
 8000798:	200000d2 	.word	0x200000d2
 800079c:	200000d3 	.word	0x200000d3
 80007a0:	200000dc 	.word	0x200000dc
 80007a4:	08003f08 	.word	0x08003f08
 80007a8:	08003f18 	.word	0x08003f18
 80007ac:	200000dd 	.word	0x200000dd
 80007b0:	200000d5 	.word	0x200000d5
 80007b4:	08003f20 	.word	0x08003f20
 80007b8:	08003f30 	.word	0x08003f30
 80007bc:	200000de 	.word	0x200000de
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08003f38 	.word	0x08003f38
 80007c8:	200000d6 	.word	0x200000d6
 80007cc:	20000001 	.word	0x20000001
 80007d0:	200000db 	.word	0x200000db
 80007d4:	08003f40 	.word	0x08003f40
 80007d8:	08003f48 	.word	0x08003f48
 80007dc:	200000e8 	.word	0x200000e8

080007e0 <adm_mode>:

//this function has a case statement to iterate through various functions an admin can do
void adm_mode() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	if (up_flag){
 80007e4:	4b4f      	ldr	r3, [pc, #316]	; (8000924 <adm_mode+0x144>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <adm_mode+0x2a>
		if (adm >4){
 80007ec:	4b4e      	ldr	r3, [pc, #312]	; (8000928 <adm_mode+0x148>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d902      	bls.n	80007fa <adm_mode+0x1a>
			adm = 0;
 80007f4:	4b4c      	ldr	r3, [pc, #304]	; (8000928 <adm_mode+0x148>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
		}
		adm++;
 80007fa:	4b4b      	ldr	r3, [pc, #300]	; (8000928 <adm_mode+0x148>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b49      	ldr	r3, [pc, #292]	; (8000928 <adm_mode+0x148>)
 8000804:	701a      	strb	r2, [r3, #0]
		resetButtons();
 8000806:	f000 fc0f 	bl	8001028 <resetButtons>
	}
	if (down_flag){
 800080a:	4b48      	ldr	r3, [pc, #288]	; (800092c <adm_mode+0x14c>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d011      	beq.n	8000836 <adm_mode+0x56>
		if (adm == 0) {
 8000812:	4b45      	ldr	r3, [pc, #276]	; (8000928 <adm_mode+0x148>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <adm_mode+0x46>
			adm = 5;
 800081a:	4b43      	ldr	r3, [pc, #268]	; (8000928 <adm_mode+0x148>)
 800081c:	2205      	movs	r2, #5
 800081e:	701a      	strb	r2, [r3, #0]
			delay(10);
 8000820:	200a      	movs	r0, #10
 8000822:	f000 fec9 	bl	80015b8 <delay>
		}
		adm--;
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <adm_mode+0x148>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b3e      	ldr	r3, [pc, #248]	; (8000928 <adm_mode+0x148>)
 8000830:	701a      	strb	r2, [r3, #0]
		resetButtons();
 8000832:	f000 fbf9 	bl	8001028 <resetButtons>
//		mpesa_flag = 1;
//	}
//
//	mpesa();

	switch (adm){
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <adm_mode+0x148>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b04      	cmp	r3, #4
 800083c:	d870      	bhi.n	8000920 <adm_mode+0x140>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <adm_mode+0x64>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	08000859 	.word	0x08000859
 8000848:	08000881 	.word	0x08000881
 800084c:	080008a9 	.word	0x080008a9
 8000850:	080008d1 	.word	0x080008d1
 8000854:	080008f9 	.word	0x080008f9
	case 0:
		lcd16x2_i2c_clear();
 8000858:	f000 fe74 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 800085c:	f000 fe62 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("CHANGE");
 8000860:	4833      	ldr	r0, [pc, #204]	; (8000930 <adm_mode+0x150>)
 8000862:	f000 fe79 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000866:	f000 fe65 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("PIN");
 800086a:	4832      	ldr	r0, [pc, #200]	; (8000934 <adm_mode+0x154>)
 800086c:	f000 fe74 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000870:	210c      	movs	r1, #12
 8000872:	2001      	movs	r0, #1
 8000874:	f000 fe32 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fe9d 	bl	80015b8 <delay>
		break;
 800087e:	e04f      	b.n	8000920 <adm_mode+0x140>

	case 1:
		lcd16x2_i2c_clear();
 8000880:	f000 fe60 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000884:	f000 fe4e 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("CHANGE");
 8000888:	4829      	ldr	r0, [pc, #164]	; (8000930 <adm_mode+0x150>)
 800088a:	f000 fe65 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 800088e:	f000 fe51 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("RATES");
 8000892:	4829      	ldr	r0, [pc, #164]	; (8000938 <adm_mode+0x158>)
 8000894:	f000 fe60 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000898:	210c      	movs	r1, #12
 800089a:	2001      	movs	r0, #1
 800089c:	f000 fe1e 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 80008a0:	2064      	movs	r0, #100	; 0x64
 80008a2:	f000 fe89 	bl	80015b8 <delay>
		break;
 80008a6:	e03b      	b.n	8000920 <adm_mode+0x140>

	case 2:
		lcd16x2_i2c_clear();
 80008a8:	f000 fe4c 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 80008ac:	f000 fe3a 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("DEACTIVATE");
 80008b0:	4822      	ldr	r0, [pc, #136]	; (800093c <adm_mode+0x15c>)
 80008b2:	f000 fe51 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 80008b6:	f000 fe3d 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("LOCK");
 80008ba:	4821      	ldr	r0, [pc, #132]	; (8000940 <adm_mode+0x160>)
 80008bc:	f000 fe4c 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 80008c0:	210c      	movs	r1, #12
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fe0a 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 80008c8:	2064      	movs	r0, #100	; 0x64
 80008ca:	f000 fe75 	bl	80015b8 <delay>
		break;
 80008ce:	e027      	b.n	8000920 <adm_mode+0x140>

	case 3:
		lcd16x2_i2c_clear();
 80008d0:	f000 fe38 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 80008d4:	f000 fe26 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("ADD EXTRA DAYS ");
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <adm_mode+0x164>)
 80008da:	f000 fe3d 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 80008de:	f000 fe29 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("WITH LOCK DEACTIVATED");
 80008e2:	4819      	ldr	r0, [pc, #100]	; (8000948 <adm_mode+0x168>)
 80008e4:	f000 fe38 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 80008e8:	210c      	movs	r1, #12
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 fdf6 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fe61 	bl	80015b8 <delay>
		break;
 80008f6:	e013      	b.n	8000920 <adm_mode+0x140>

	case 4:
		lcd16x2_i2c_clear();
 80008f8:	f000 fe24 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 80008fc:	f000 fe12 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("ACTIVATE ");
 8000900:	4812      	ldr	r0, [pc, #72]	; (800094c <adm_mode+0x16c>)
 8000902:	f000 fe29 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000906:	f000 fe15 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("LOCK");
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <adm_mode+0x160>)
 800090c:	f000 fe24 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000910:	210c      	movs	r1, #12
 8000912:	2001      	movs	r0, #1
 8000914:	f000 fde2 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000918:	2064      	movs	r0, #100	; 0x64
 800091a:	f000 fe4d 	bl	80015b8 <delay>
		break;
 800091e:	bf00      	nop
	}
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000d2 	.word	0x200000d2
 8000928:	200000e0 	.word	0x200000e0
 800092c:	200000d3 	.word	0x200000d3
 8000930:	08003f50 	.word	0x08003f50
 8000934:	08003f58 	.word	0x08003f58
 8000938:	08003f5c 	.word	0x08003f5c
 800093c:	08003f64 	.word	0x08003f64
 8000940:	08003f70 	.word	0x08003f70
 8000944:	08003f78 	.word	0x08003f78
 8000948:	08003f88 	.word	0x08003f88
 800094c:	08003fa0 	.word	0x08003fa0

08000950 <sub_mode>:


//this function has a switch statement to iterate through various subscription modes available for the client
void sub_mode() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	if (up_flag){
 8000954:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <sub_mode+0x130>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00e      	beq.n	800097a <sub_mode+0x2a>
		if (sub >3){
 800095c:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <sub_mode+0x134>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d902      	bls.n	800096a <sub_mode+0x1a>
			sub = 0;
 8000964:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <sub_mode+0x134>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
		}
		sub++;
 800096a:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <sub_mode+0x134>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <sub_mode+0x134>)
 8000974:	701a      	strb	r2, [r3, #0]
		resetButtons();
 8000976:	f000 fb57 	bl	8001028 <resetButtons>
	}
	if (down_flag){
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <sub_mode+0x138>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d011      	beq.n	80009a6 <sub_mode+0x56>
		if (sub == 0) {
 8000982:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <sub_mode+0x134>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d105      	bne.n	8000996 <sub_mode+0x46>
			sub = 4;
 800098a:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <sub_mode+0x134>)
 800098c:	2204      	movs	r2, #4
 800098e:	701a      	strb	r2, [r3, #0]
			delay(10);
 8000990:	200a      	movs	r0, #10
 8000992:	f000 fe11 	bl	80015b8 <delay>
		}
		sub--;
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <sub_mode+0x134>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	3b01      	subs	r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <sub_mode+0x134>)
 80009a0:	701a      	strb	r2, [r3, #0]
		resetButtons();
 80009a2:	f000 fb41 	bl	8001028 <resetButtons>
	}

	if (ok_flag){
 80009a6:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <sub_mode+0x13c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <sub_mode+0x68>
		resetButtons();
 80009ae:	f000 fb3b 	bl	8001028 <resetButtons>
		mpesa_flag = 1;
 80009b2:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <sub_mode+0x140>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
	}

	mpesa();
 80009b8:	f000 f876 	bl	8000aa8 <mpesa>

	switch (sub){
 80009bc:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <sub_mode+0x134>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d85b      	bhi.n	8000a7c <sub_mode+0x12c>
 80009c4:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <sub_mode+0x7c>)
 80009c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ca:	bf00      	nop
 80009cc:	080009dd 	.word	0x080009dd
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a2d 	.word	0x08000a2d
 80009d8:	08000a55 	.word	0x08000a55
	case 0:
		lcd16x2_i2c_clear();
 80009dc:	f000 fdb2 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 80009e0:	f000 fda0 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("WEEKLY");
 80009e4:	482b      	ldr	r0, [pc, #172]	; (8000a94 <sub_mode+0x144>)
 80009e6:	f000 fdb7 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 80009ea:	f000 fda3 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SUBSCRIPTION");
 80009ee:	482a      	ldr	r0, [pc, #168]	; (8000a98 <sub_mode+0x148>)
 80009f0:	f000 fdb2 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 80009f4:	210c      	movs	r1, #12
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fd70 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f000 fddb 	bl	80015b8 <delay>
		break;
 8000a02:	e03b      	b.n	8000a7c <sub_mode+0x12c>

	case 1:
		lcd16x2_i2c_clear();
 8000a04:	f000 fd9e 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000a08:	f000 fd8c 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("HALF MONTHLY");
 8000a0c:	4823      	ldr	r0, [pc, #140]	; (8000a9c <sub_mode+0x14c>)
 8000a0e:	f000 fda3 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000a12:	f000 fd8f 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SUBSCRIPTION");
 8000a16:	4820      	ldr	r0, [pc, #128]	; (8000a98 <sub_mode+0x148>)
 8000a18:	f000 fd9e 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000a1c:	210c      	movs	r1, #12
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f000 fd5c 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 fdc7 	bl	80015b8 <delay>
		break;
 8000a2a:	e027      	b.n	8000a7c <sub_mode+0x12c>

	case 2:
		lcd16x2_i2c_clear();
 8000a2c:	f000 fd8a 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000a30:	f000 fd78 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("MONTHLY");
 8000a34:	481a      	ldr	r0, [pc, #104]	; (8000aa0 <sub_mode+0x150>)
 8000a36:	f000 fd8f 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000a3a:	f000 fd7b 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SUBSCRIPTION");
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <sub_mode+0x148>)
 8000a40:	f000 fd8a 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000a44:	210c      	movs	r1, #12
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fd48 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f000 fdb3 	bl	80015b8 <delay>
		break;
 8000a52:	e013      	b.n	8000a7c <sub_mode+0x12c>

	case 3:
		lcd16x2_i2c_clear();
 8000a54:	f000 fd76 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000a58:	f000 fd64 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("HALF ANNUALLY");
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <sub_mode+0x154>)
 8000a5e:	f000 fd7b 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000a62:	f000 fd67 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SUBSCRIPTION");
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <sub_mode+0x148>)
 8000a68:	f000 fd76 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000a6c:	210c      	movs	r1, #12
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 fd34 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f000 fd9f 	bl	80015b8 <delay>
		break;
 8000a7a:	bf00      	nop
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000d2 	.word	0x200000d2
 8000a84:	200000df 	.word	0x200000df
 8000a88:	200000d3 	.word	0x200000d3
 8000a8c:	200000d4 	.word	0x200000d4
 8000a90:	200000e1 	.word	0x200000e1
 8000a94:	08003fac 	.word	0x08003fac
 8000a98:	08003f08 	.word	0x08003f08
 8000a9c:	08003fb4 	.word	0x08003fb4
 8000aa0:	08003fc4 	.word	0x08003fc4
 8000aa4:	08003fcc 	.word	0x08003fcc

08000aa8 <mpesa>:

void mpesa(){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	while(mpesa_flag){
 8000aac:	e064      	b.n	8000b78 <mpesa+0xd0>
//		this is where at commands for simcard mpesa payment will be initiated
		button_hundler();
 8000aae:	f7ff fcc1 	bl	8000434 <button_hundler>

		lcd16x2_i2c_clear();
 8000ab2:	f000 fd47 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000ab6:	f000 fd35 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("INSERT");
 8000aba:	4833      	ldr	r0, [pc, #204]	; (8000b88 <mpesa+0xe0>)
 8000abc:	f000 fd4c 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000ac0:	f000 fd38 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SIMCARD");
 8000ac4:	4831      	ldr	r0, [pc, #196]	; (8000b8c <mpesa+0xe4>)
 8000ac6:	f000 fd47 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000aca:	210c      	movs	r1, #12
 8000acc:	2001      	movs	r0, #1
 8000ace:	f000 fd05 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000ad2:	2064      	movs	r0, #100	; 0x64
 8000ad4:	f000 fd70 	bl	80015b8 <delay>

		if (ok_flag){
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <mpesa+0xe8>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d03e      	beq.n	8000b5e <mpesa+0xb6>
			resetButtons();
 8000ae0:	f000 faa2 	bl	8001028 <resetButtons>
			mpesa_menu_flag =1 ;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <mpesa+0xec>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
		}

		while (mpesa_menu_flag){
 8000aea:	e038      	b.n	8000b5e <mpesa+0xb6>
//			this part is a guide to send command to initiate mpesa menu for payments
			button_hundler();
 8000aec:	f7ff fca2 	bl	8000434 <button_hundler>
			lcd16x2_i2c_clear();
 8000af0:	f000 fd28 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 8000af4:	f000 fd16 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("MPESA");
 8000af8:	4827      	ldr	r0, [pc, #156]	; (8000b98 <mpesa+0xf0>)
 8000afa:	f000 fd2d 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000afe:	f000 fd19 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("MENU");
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <mpesa+0xf4>)
 8000b04:	f000 fd28 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_setCursor(1, 12);
 8000b08:	210c      	movs	r1, #12
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fce6 	bl	80014dc <lcd16x2_i2c_setCursor>
			delay(100);
 8000b10:	2064      	movs	r0, #100	; 0x64
 8000b12:	f000 fd51 	bl	80015b8 <delay>
			if (ok_flag) {
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <mpesa+0xe8>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d012      	beq.n	8000b44 <mpesa+0x9c>
				resetButtons();
 8000b1e:	f000 fa83 	bl	8001028 <resetButtons>
				mpesa_mode =1 ;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <mpesa+0xf8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	701a      	strb	r2, [r3, #0]
			}

			while(mpesa_mode){
 8000b28:	e00c      	b.n	8000b44 <mpesa+0x9c>
				button_hundler();
 8000b2a:	f7ff fc83 	bl	8000434 <button_hundler>
				mpesaPaymentMenu();
 8000b2e:	f000 f83d 	bl	8000bac <mpesaPaymentMenu>
				if (back_flag){
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <mpesa+0xfc>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <mpesa+0x9c>
					resetButtons();
 8000b3a:	f000 fa75 	bl	8001028 <resetButtons>
					mpesa_mode =0;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <mpesa+0xf8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			while(mpesa_mode){
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <mpesa+0xf8>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1ee      	bne.n	8000b2a <mpesa+0x82>
				}
			}

			if (back_flag){
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <mpesa+0xfc>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <mpesa+0xb6>
				resetButtons();
 8000b54:	f000 fa68 	bl	8001028 <resetButtons>
				mpesa_menu_flag =0;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <mpesa+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
		while (mpesa_menu_flag){
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <mpesa+0xec>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1c2      	bne.n	8000aec <mpesa+0x44>
			}
		}

		if (back_flag){
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <mpesa+0xfc>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d004      	beq.n	8000b78 <mpesa+0xd0>
			resetButtons();
 8000b6e:	f000 fa5b 	bl	8001028 <resetButtons>
			mpesa_flag =0;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <mpesa+0x100>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
	while(mpesa_flag){
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <mpesa+0x100>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d196      	bne.n	8000aae <mpesa+0x6>
		}
	}
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	08003fdc 	.word	0x08003fdc
 8000b8c:	08003fe4 	.word	0x08003fe4
 8000b90:	200000d4 	.word	0x200000d4
 8000b94:	200000e2 	.word	0x200000e2
 8000b98:	08003fec 	.word	0x08003fec
 8000b9c:	08003ef4 	.word	0x08003ef4
 8000ba0:	200000d7 	.word	0x200000d7
 8000ba4:	200000d5 	.word	0x200000d5
 8000ba8:	200000e1 	.word	0x200000e1

08000bac <mpesaPaymentMenu>:

//this function contains switch statement to showcase menu navigation for mpesa payment
void mpesaPaymentMenu(){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if (up_flag){
 8000bb0:	4b62      	ldr	r3, [pc, #392]	; (8000d3c <mpesaPaymentMenu+0x190>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00e      	beq.n	8000bd6 <mpesaPaymentMenu+0x2a>
		if (mpesa_case >5){
 8000bb8:	4b61      	ldr	r3, [pc, #388]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d902      	bls.n	8000bc6 <mpesaPaymentMenu+0x1a>
			mpesa_case = 0;
 8000bc0:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
		}
		mpesa_case ++;
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bd0:	701a      	strb	r2, [r3, #0]
		resetButtons();
 8000bd2:	f000 fa29 	bl	8001028 <resetButtons>
	}
	if (down_flag){
 8000bd6:	4b5b      	ldr	r3, [pc, #364]	; (8000d44 <mpesaPaymentMenu+0x198>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d011      	beq.n	8000c02 <mpesaPaymentMenu+0x56>
		if (mpesa_case == 0) {
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d105      	bne.n	8000bf2 <mpesaPaymentMenu+0x46>
			mpesa_case = 6;
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000be8:	2206      	movs	r2, #6
 8000bea:	701a      	strb	r2, [r3, #0]
			delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fce3 	bl	80015b8 <delay>
		}
		mpesa_case --;
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000bfc:	701a      	strb	r2, [r3, #0]
		resetButtons();
 8000bfe:	f000 fa13 	bl	8001028 <resetButtons>
	}

	if (ok_flag && mpesa_case == 4){
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <mpesaPaymentMenu+0x19c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d008      	beq.n	8000c1c <mpesaPaymentMenu+0x70>
 8000c0a:	4b4d      	ldr	r3, [pc, #308]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d104      	bne.n	8000c1c <mpesaPaymentMenu+0x70>
		resetButtons();
 8000c12:	f000 fa09 	bl	8001028 <resetButtons>
		payment_flag = 1;
 8000c16:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <mpesaPaymentMenu+0x1a0>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
	}

	payment();
 8000c1c:	f000 f8b0 	bl	8000d80 <payment>

	switch (mpesa_case){
 8000c20:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <mpesaPaymentMenu+0x194>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	f200 8087 	bhi.w	8000d38 <mpesaPaymentMenu+0x18c>
 8000c2a:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <mpesaPaymentMenu+0x84>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c49 	.word	0x08000c49
 8000c34:	08000c71 	.word	0x08000c71
 8000c38:	08000c99 	.word	0x08000c99
 8000c3c:	08000cc1 	.word	0x08000cc1
 8000c40:	08000ce9 	.word	0x08000ce9
 8000c44:	08000d11 	.word	0x08000d11
	case 0:
		lcd16x2_i2c_clear();
 8000c48:	f000 fc7c 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000c4c:	f000 fc6a 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("SEND");
 8000c50:	483f      	ldr	r0, [pc, #252]	; (8000d50 <mpesaPaymentMenu+0x1a4>)
 8000c52:	f000 fc81 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000c56:	f000 fc6d 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("MONEY");
 8000c5a:	483e      	ldr	r0, [pc, #248]	; (8000d54 <mpesaPaymentMenu+0x1a8>)
 8000c5c:	f000 fc7c 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000c60:	210c      	movs	r1, #12
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 fc3a 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000c68:	2064      	movs	r0, #100	; 0x64
 8000c6a:	f000 fca5 	bl	80015b8 <delay>
		break;
 8000c6e:	e063      	b.n	8000d38 <mpesaPaymentMenu+0x18c>

	case 1:
		lcd16x2_i2c_clear();
 8000c70:	f000 fc68 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000c74:	f000 fc56 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("WITHDRAW");
 8000c78:	4837      	ldr	r0, [pc, #220]	; (8000d58 <mpesaPaymentMenu+0x1ac>)
 8000c7a:	f000 fc6d 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000c7e:	f000 fc59 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("CASH");
 8000c82:	4836      	ldr	r0, [pc, #216]	; (8000d5c <mpesaPaymentMenu+0x1b0>)
 8000c84:	f000 fc68 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000c88:	210c      	movs	r1, #12
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f000 fc26 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f000 fc91 	bl	80015b8 <delay>
		break;
 8000c96:	e04f      	b.n	8000d38 <mpesaPaymentMenu+0x18c>

	case 2:
		lcd16x2_i2c_clear();
 8000c98:	f000 fc54 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000c9c:	f000 fc42 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("BUY");
 8000ca0:	482f      	ldr	r0, [pc, #188]	; (8000d60 <mpesaPaymentMenu+0x1b4>)
 8000ca2:	f000 fc59 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000ca6:	f000 fc45 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("AIRTIME");
 8000caa:	482e      	ldr	r0, [pc, #184]	; (8000d64 <mpesaPaymentMenu+0x1b8>)
 8000cac:	f000 fc54 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000cb0:	210c      	movs	r1, #12
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fc12 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000cb8:	2064      	movs	r0, #100	; 0x64
 8000cba:	f000 fc7d 	bl	80015b8 <delay>
		break;
 8000cbe:	e03b      	b.n	8000d38 <mpesaPaymentMenu+0x18c>

	case 3:
		lcd16x2_i2c_clear();
 8000cc0:	f000 fc40 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000cc4:	f000 fc2e 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("LOAN AND");
 8000cc8:	4827      	ldr	r0, [pc, #156]	; (8000d68 <mpesaPaymentMenu+0x1bc>)
 8000cca:	f000 fc45 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000cce:	f000 fc31 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("SAVINGS");
 8000cd2:	4826      	ldr	r0, [pc, #152]	; (8000d6c <mpesaPaymentMenu+0x1c0>)
 8000cd4:	f000 fc40 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000cd8:	210c      	movs	r1, #12
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fbfe 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	f000 fc69 	bl	80015b8 <delay>
		break;
 8000ce6:	e027      	b.n	8000d38 <mpesaPaymentMenu+0x18c>

	case 4:
		lcd16x2_i2c_clear();
 8000ce8:	f000 fc2c 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000cec:	f000 fc1a 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("LIPA NA");
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <mpesaPaymentMenu+0x1c4>)
 8000cf2:	f000 fc31 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000cf6:	f000 fc1d 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("MPESA");
 8000cfa:	481e      	ldr	r0, [pc, #120]	; (8000d74 <mpesaPaymentMenu+0x1c8>)
 8000cfc:	f000 fc2c 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000d00:	210c      	movs	r1, #12
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 fbea 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f000 fc55 	bl	80015b8 <delay>
		break;
 8000d0e:	e013      	b.n	8000d38 <mpesaPaymentMenu+0x18c>

	case 5:
		lcd16x2_i2c_clear();
 8000d10:	f000 fc18 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 8000d14:	f000 fc06 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf(" MY ");
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <mpesaPaymentMenu+0x1cc>)
 8000d1a:	f000 fc1d 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8000d1e:	f000 fc09 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("ACCOUNT");
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <mpesaPaymentMenu+0x1d0>)
 8000d24:	f000 fc18 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_setCursor(1, 12);
 8000d28:	210c      	movs	r1, #12
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f000 fbd6 	bl	80014dc <lcd16x2_i2c_setCursor>
		delay(100);
 8000d30:	2064      	movs	r0, #100	; 0x64
 8000d32:	f000 fc41 	bl	80015b8 <delay>
		break;
 8000d36:	bf00      	nop
	}
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000d2 	.word	0x200000d2
 8000d40:	200000d8 	.word	0x200000d8
 8000d44:	200000d3 	.word	0x200000d3
 8000d48:	200000d4 	.word	0x200000d4
 8000d4c:	200000d9 	.word	0x200000d9
 8000d50:	08003ff4 	.word	0x08003ff4
 8000d54:	08003ffc 	.word	0x08003ffc
 8000d58:	08004004 	.word	0x08004004
 8000d5c:	08004010 	.word	0x08004010
 8000d60:	08004018 	.word	0x08004018
 8000d64:	0800401c 	.word	0x0800401c
 8000d68:	08004024 	.word	0x08004024
 8000d6c:	08004030 	.word	0x08004030
 8000d70:	08004038 	.word	0x08004038
 8000d74:	08003fec 	.word	0x08003fec
 8000d78:	08004040 	.word	0x08004040
 8000d7c:	08004048 	.word	0x08004048

08000d80 <payment>:

//this function assumes that payments shall be made via paybill number and guides on how the payment process shall continue
void payment(){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	while (payment_flag){
 8000d84:	e11b      	b.n	8000fbe <payment+0x23e>
		button_hundler();
 8000d86:	f7ff fb55 	bl	8000434 <button_hundler>

		if (up_flag){
 8000d8a:	4b91      	ldr	r3, [pc, #580]	; (8000fd0 <payment+0x250>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00e      	beq.n	8000db0 <payment+0x30>
			if (till_menu >2){
 8000d92:	4b90      	ldr	r3, [pc, #576]	; (8000fd4 <payment+0x254>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d902      	bls.n	8000da0 <payment+0x20>
				till_menu = 0;
 8000d9a:	4b8e      	ldr	r3, [pc, #568]	; (8000fd4 <payment+0x254>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			}
			till_menu ++;
 8000da0:	4b8c      	ldr	r3, [pc, #560]	; (8000fd4 <payment+0x254>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b8a      	ldr	r3, [pc, #552]	; (8000fd4 <payment+0x254>)
 8000daa:	701a      	strb	r2, [r3, #0]
			resetButtons();
 8000dac:	f000 f93c 	bl	8001028 <resetButtons>
		}
		if (down_flag){
 8000db0:	4b89      	ldr	r3, [pc, #548]	; (8000fd8 <payment+0x258>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d011      	beq.n	8000ddc <payment+0x5c>
			if (till_menu == 0) {
 8000db8:	4b86      	ldr	r3, [pc, #536]	; (8000fd4 <payment+0x254>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <payment+0x4c>
				till_menu = 3;
 8000dc0:	4b84      	ldr	r3, [pc, #528]	; (8000fd4 <payment+0x254>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
				delay(10);
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 fbf6 	bl	80015b8 <delay>
			}
			till_menu --;
 8000dcc:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <payment+0x254>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	4b7f      	ldr	r3, [pc, #508]	; (8000fd4 <payment+0x254>)
 8000dd6:	701a      	strb	r2, [r3, #0]
			resetButtons();
 8000dd8:	f000 f926 	bl	8001028 <resetButtons>
		}

		if (ok_flag && till_menu == 0){
 8000ddc:	4b7f      	ldr	r3, [pc, #508]	; (8000fdc <payment+0x25c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a3 	beq.w	8000f2c <payment+0x1ac>
 8000de6:	4b7b      	ldr	r3, [pc, #492]	; (8000fd4 <payment+0x254>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 809e 	bne.w	8000f2c <payment+0x1ac>
			resetButtons();
 8000df0:	f000 f91a 	bl	8001028 <resetButtons>
			till_flag = 1;
 8000df4:	4b7a      	ldr	r3, [pc, #488]	; (8000fe0 <payment+0x260>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
		}

		while(till_flag){
 8000dfa:	e097      	b.n	8000f2c <payment+0x1ac>
			button_hundler();
 8000dfc:	f7ff fb1a 	bl	8000434 <button_hundler>
			lcd16x2_i2c_clear();
 8000e00:	f000 fba0 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 8000e04:	f000 fb8e 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("Enter Business");
 8000e08:	4876      	ldr	r0, [pc, #472]	; (8000fe4 <payment+0x264>)
 8000e0a:	f000 fba5 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000e0e:	f000 fb91 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("    Number");
 8000e12:	4875      	ldr	r0, [pc, #468]	; (8000fe8 <payment+0x268>)
 8000e14:	f000 fba0 	bl	8001558 <lcd16x2_i2c_printf>
			delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f000 fbcd 	bl	80015b8 <delay>

			if (ok_flag) {
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <payment+0x25c>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d075      	beq.n	8000f12 <payment+0x192>
				resetButtons();
 8000e26:	f000 f8ff 	bl	8001028 <resetButtons>
				paybill = 1 ;
 8000e2a:	4b70      	ldr	r3, [pc, #448]	; (8000fec <payment+0x26c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
			}

			while (paybill){
 8000e30:	e06f      	b.n	8000f12 <payment+0x192>
				button_hundler();
 8000e32:	f7ff faff 	bl	8000434 <button_hundler>
				lcd16x2_i2c_clear();
 8000e36:	f000 fb85 	bl	8001544 <lcd16x2_i2c_clear>
				lcd16x2_i2c_1stLine();
 8000e3a:	f000 fb73 	bl	8001524 <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("Enter account");
 8000e3e:	486c      	ldr	r0, [pc, #432]	; (8000ff0 <payment+0x270>)
 8000e40:	f000 fb8a 	bl	8001558 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8000e44:	f000 fb76 	bl	8001534 <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("    Number");
 8000e48:	4867      	ldr	r0, [pc, #412]	; (8000fe8 <payment+0x268>)
 8000e4a:	f000 fb85 	bl	8001558 <lcd16x2_i2c_printf>
				delay(100);
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f000 fbb2 	bl	80015b8 <delay>

				if (ok_flag) {
 8000e54:	4b61      	ldr	r3, [pc, #388]	; (8000fdc <payment+0x25c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d04d      	beq.n	8000ef8 <payment+0x178>
					resetButtons();
 8000e5c:	f000 f8e4 	bl	8001028 <resetButtons>
					amount = 1 ;
 8000e60:	4b64      	ldr	r3, [pc, #400]	; (8000ff4 <payment+0x274>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				}

				while (amount){
 8000e66:	e047      	b.n	8000ef8 <payment+0x178>
					button_hundler();
 8000e68:	f7ff fae4 	bl	8000434 <button_hundler>
					lcd16x2_i2c_clear();
 8000e6c:	f000 fb6a 	bl	8001544 <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8000e70:	f000 fb58 	bl	8001524 <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("  Enter");
 8000e74:	4860      	ldr	r0, [pc, #384]	; (8000ff8 <payment+0x278>)
 8000e76:	f000 fb6f 	bl	8001558 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 8000e7a:	f000 fb5b 	bl	8001534 <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf(" Amount");
 8000e7e:	485f      	ldr	r0, [pc, #380]	; (8000ffc <payment+0x27c>)
 8000e80:	f000 fb6a 	bl	8001558 <lcd16x2_i2c_printf>
					delay(100);
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f000 fb97 	bl	80015b8 <delay>

					if (ok_flag) {
 8000e8a:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <payment+0x25c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d025      	beq.n	8000ede <payment+0x15e>
						resetButtons();
 8000e92:	f000 f8c9 	bl	8001028 <resetButtons>
						pin = 1 ;
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <payment+0x280>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
					}

					while (pin){
 8000e9c:	e01f      	b.n	8000ede <payment+0x15e>
						button_hundler();
 8000e9e:	f7ff fac9 	bl	8000434 <button_hundler>
						lcd16x2_i2c_clear();
 8000ea2:	f000 fb4f 	bl	8001544 <lcd16x2_i2c_clear>
						lcd16x2_i2c_1stLine();
 8000ea6:	f000 fb3d 	bl	8001524 <lcd16x2_i2c_1stLine>
						lcd16x2_i2c_printf("  Enter");
 8000eaa:	4853      	ldr	r0, [pc, #332]	; (8000ff8 <payment+0x278>)
 8000eac:	f000 fb54 	bl	8001558 <lcd16x2_i2c_printf>
						lcd16x2_i2c_2ndLine();
 8000eb0:	f000 fb40 	bl	8001534 <lcd16x2_i2c_2ndLine>
						lcd16x2_i2c_printf("  PIN");
 8000eb4:	4853      	ldr	r0, [pc, #332]	; (8001004 <payment+0x284>)
 8000eb6:	f000 fb4f 	bl	8001558 <lcd16x2_i2c_printf>
						delay(100);
 8000eba:	2064      	movs	r0, #100	; 0x64
 8000ebc:	f000 fb7c 	bl	80015b8 <delay>

						if (ok_flag) {
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <payment+0x25c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <payment+0x14c>
							resetButtons();
 8000ec8:	f000 f8ae 	bl	8001028 <resetButtons>
//							amount = 1 ;
						}

						if (back_flag){
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <payment+0x288>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d004      	beq.n	8000ede <payment+0x15e>
							resetButtons();
 8000ed4:	f000 f8a8 	bl	8001028 <resetButtons>
							pin =0;
 8000ed8:	4b49      	ldr	r3, [pc, #292]	; (8001000 <payment+0x280>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
					while (pin){
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <payment+0x280>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1db      	bne.n	8000e9e <payment+0x11e>
						}
					}

					if (back_flag){
 8000ee6:	4b48      	ldr	r3, [pc, #288]	; (8001008 <payment+0x288>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d004      	beq.n	8000ef8 <payment+0x178>
						resetButtons();
 8000eee:	f000 f89b 	bl	8001028 <resetButtons>
						amount =0;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <payment+0x274>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
				while (amount){
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <payment+0x274>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1b3      	bne.n	8000e68 <payment+0xe8>
					}
				}

				if (back_flag){
 8000f00:	4b41      	ldr	r3, [pc, #260]	; (8001008 <payment+0x288>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <payment+0x192>
					resetButtons();
 8000f08:	f000 f88e 	bl	8001028 <resetButtons>
					paybill =0;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <payment+0x26c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
			while (paybill){
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <payment+0x26c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d18b      	bne.n	8000e32 <payment+0xb2>
				}
			}

			if (back_flag){
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <payment+0x288>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d004      	beq.n	8000f2c <payment+0x1ac>
				resetButtons();
 8000f22:	f000 f881 	bl	8001028 <resetButtons>
				till_flag =0;
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <payment+0x260>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
		while(till_flag){
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <payment+0x260>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f af63 	bne.w	8000dfc <payment+0x7c>
			}
		}

		switch (till_menu){
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <payment+0x254>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d026      	beq.n	8000f8c <payment+0x20c>
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	dc34      	bgt.n	8000fac <payment+0x22c>
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d002      	beq.n	8000f4c <payment+0x1cc>
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d010      	beq.n	8000f6c <payment+0x1ec>
 8000f4a:	e02f      	b.n	8000fac <payment+0x22c>
		case 0:
			lcd16x2_i2c_clear();
 8000f4c:	f000 fafa 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 8000f50:	f000 fae8 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("PAY BILL");
 8000f54:	482d      	ldr	r0, [pc, #180]	; (800100c <payment+0x28c>)
 8000f56:	f000 faff 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000f5a:	f000 faeb 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("");
 8000f5e:	482c      	ldr	r0, [pc, #176]	; (8001010 <payment+0x290>)
 8000f60:	f000 fafa 	bl	8001558 <lcd16x2_i2c_printf>
			delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f000 fb27 	bl	80015b8 <delay>
			break;
 8000f6a:	e01f      	b.n	8000fac <payment+0x22c>

		case 1:
			lcd16x2_i2c_clear();
 8000f6c:	f000 faea 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 8000f70:	f000 fad8 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("BUY GOODS");
 8000f74:	4827      	ldr	r0, [pc, #156]	; (8001014 <payment+0x294>)
 8000f76:	f000 faef 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000f7a:	f000 fadb 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("AND SERVICES");
 8000f7e:	4826      	ldr	r0, [pc, #152]	; (8001018 <payment+0x298>)
 8000f80:	f000 faea 	bl	8001558 <lcd16x2_i2c_printf>
			delay(100);
 8000f84:	2064      	movs	r0, #100	; 0x64
 8000f86:	f000 fb17 	bl	80015b8 <delay>
			break;
 8000f8a:	e00f      	b.n	8000fac <payment+0x22c>

		case 2:
			lcd16x2_i2c_clear();
 8000f8c:	f000 fada 	bl	8001544 <lcd16x2_i2c_clear>
			lcd16x2_i2c_1stLine();
 8000f90:	f000 fac8 	bl	8001524 <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("POCHI LA");
 8000f94:	4821      	ldr	r0, [pc, #132]	; (800101c <payment+0x29c>)
 8000f96:	f000 fadf 	bl	8001558 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 8000f9a:	f000 facb 	bl	8001534 <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("BIASHARA");
 8000f9e:	4820      	ldr	r0, [pc, #128]	; (8001020 <payment+0x2a0>)
 8000fa0:	f000 fada 	bl	8001558 <lcd16x2_i2c_printf>
			delay(100);
 8000fa4:	2064      	movs	r0, #100	; 0x64
 8000fa6:	f000 fb07 	bl	80015b8 <delay>
			break;
 8000faa:	bf00      	nop
		}

		if (back_flag){
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <payment+0x288>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <payment+0x23e>
			resetButtons();
 8000fb4:	f000 f838 	bl	8001028 <resetButtons>
			payment_flag =0;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <payment+0x2a4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	while (payment_flag){
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <payment+0x2a4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	f47f aedf 	bne.w	8000d86 <payment+0x6>
		}
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000d2 	.word	0x200000d2
 8000fd4:	200000e4 	.word	0x200000e4
 8000fd8:	200000d3 	.word	0x200000d3
 8000fdc:	200000d4 	.word	0x200000d4
 8000fe0:	200000e3 	.word	0x200000e3
 8000fe4:	08004050 	.word	0x08004050
 8000fe8:	08004060 	.word	0x08004060
 8000fec:	200000e5 	.word	0x200000e5
 8000ff0:	0800406c 	.word	0x0800406c
 8000ff4:	200000e7 	.word	0x200000e7
 8000ff8:	0800407c 	.word	0x0800407c
 8000ffc:	08004084 	.word	0x08004084
 8001000:	200000e6 	.word	0x200000e6
 8001004:	08003f48 	.word	0x08003f48
 8001008:	200000d5 	.word	0x200000d5
 800100c:	0800408c 	.word	0x0800408c
 8001010:	08004098 	.word	0x08004098
 8001014:	0800409c 	.word	0x0800409c
 8001018:	080040a8 	.word	0x080040a8
 800101c:	080040b8 	.word	0x080040b8
 8001020:	080040c4 	.word	0x080040c4
 8001024:	200000d9 	.word	0x200000d9

08001028 <resetButtons>:

void resetButtons(){
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
	up_flag = 0;
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <resetButtons+0x24>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	down_flag = 0;
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <resetButtons+0x28>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	ok_flag = 0;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <resetButtons+0x2c>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
	back_flag = 0;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <resetButtons+0x30>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200000d2 	.word	0x200000d2
 8001050:	200000d3 	.word	0x200000d3
 8001054:	200000d4 	.word	0x200000d4
 8001058:	200000d5 	.word	0x200000d5

0800105c <sleep_mode>:

//what to display on sleep mode
void sleep_mode() {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	if(!backlight) {
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <sleep_mode+0x30>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10e      	bne.n	8001086 <sleep_mode+0x2a>
		lcd16x2_i2c_clear();
 8001068:	f000 fa6c 	bl	8001544 <lcd16x2_i2c_clear>
		lcd16x2_i2c_1stLine();
 800106c:	f000 fa5a 	bl	8001524 <lcd16x2_i2c_1stLine>
		lcd16x2_i2c_printf("DISPLAY");
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <sleep_mode+0x34>)
 8001072:	f000 fa71 	bl	8001558 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 8001076:	f000 fa5d 	bl	8001534 <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("BALANCE");
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <sleep_mode+0x38>)
 800107c:	f000 fa6c 	bl	8001558 <lcd16x2_i2c_printf>
		delay(100);
 8001080:	2064      	movs	r0, #100	; 0x64
 8001082:	f000 fa99 	bl	80015b8 <delay>
	}
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000000 	.word	0x20000000
 8001090:	080040d0 	.word	0x080040d0
 8001094:	08003f30 	.word	0x08003f30

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_RTC_Init+0x30>)
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <MX_RTC_Init+0x34>)
 80010ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_RTC_Init+0x30>)
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_RTC_Init+0x30>)
 80010b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010bc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_RTC_Init+0x30>)
 80010c0:	f002 f946 	bl	8003350 <HAL_RTC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80010ca:	f7ff ffe5 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000ec 	.word	0x200000ec
 80010d8:	40002800 	.word	0x40002800

080010dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_RTC_MspInit+0x3c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d110      	bne.n	8001110 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80010ee:	f001 fba7 	bl	8002840 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_RTC_MspInit+0x40>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_RTC_MspInit+0x40>)
 80010f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_RTC_MspInit+0x40>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_RTC_MspInit+0x44>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40002800 	.word	0x40002800
 800111c:	40021000 	.word	0x40021000
 8001120:	4242043c 	.word	0x4242043c

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <HAL_MspInit+0x5c>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6193      	str	r3, [r2, #24]
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x5c>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_MspInit+0x5c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x5c>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x60>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MspInit+0x60>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 fa95 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  user_systic_handler();
 80011d2:	f000 fa07 	bl	80015e4 <user_systic_handler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f002 f9d2 	bl	80035b4 <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20005000 	.word	0x20005000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000100 	.word	0x20000100
 8001244:	20000268 	.word	0x20000268

08001248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001254:	f7ff fff8 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800125a:	490c      	ldr	r1, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <LoopFillZerobss+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001270:	4c09      	ldr	r4, [pc, #36]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f002 f99f 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff f84d 	bl	8000320 <main>
  bx lr
 8001286:	4770      	bx	lr
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001290:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 8001294:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001298:	20000268 	.word	0x20000268

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>
	...

080012a0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	75fb      	strb	r3, [r7, #23]
  const uint8_t command_4_7 = (0xF0 & command);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	75bb      	strb	r3, [r7, #22]
  if(backlight){
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <lcd16x2_i2c_sendCommand+0xa0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <lcd16x2_i2c_sendCommand+0x62>
	  uint8_t i2cData[4] =
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	f043 030c 	orr.w	r3, r3, #12
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	743b      	strb	r3, [r7, #16]
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	747b      	strb	r3, [r7, #17]
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	f043 030c 	orr.w	r3, r3, #12
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	74bb      	strb	r3, [r7, #18]
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	74fb      	strb	r3, [r7, #19]
		  command_4_7 | LCD_BK_LIGHT,
		  command_0_3 | LCD_EN | LCD_BK_LIGHT,
		  command_0_3 | LCD_BK_LIGHT,
	  };

	  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <lcd16x2_i2c_sendCommand+0xa4>)
 80012ea:	6818      	ldr	r0, [r3, #0]
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <lcd16x2_i2c_sendCommand+0xa8>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b299      	uxth	r1, r3
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	23c8      	movs	r3, #200	; 0xc8
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2304      	movs	r3, #4
 80012fc:	f000 fe1a 	bl	8001f34 <HAL_I2C_Master_Transmit>
			command_0_3 | LCD_NO_BK_LIGHT,
		};
	  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
  }

}
 8001300:	e019      	b.n	8001336 <lcd16x2_i2c_sendCommand+0x96>
	  uint8_t i2cData[4] =
 8001302:	7dbb      	ldrb	r3, [r7, #22]
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	b2db      	uxtb	r3, r3
 800130a:	733b      	strb	r3, [r7, #12]
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	737b      	strb	r3, [r7, #13]
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73bb      	strb	r3, [r7, #14]
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	73fb      	strb	r3, [r7, #15]
	  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <lcd16x2_i2c_sendCommand+0xa4>)
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <lcd16x2_i2c_sendCommand+0xa8>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b299      	uxth	r1, r3
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2304      	movs	r3, #4
 8001332:	f000 fdff 	bl	8001f34 <HAL_I2C_Master_Transmit>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000
 8001344:	20000104 	.word	0x20000104
 8001348:	20000108 	.word	0x20000108

0800134c <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af02      	add	r7, sp, #8
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	75fb      	strb	r3, [r7, #23]
  const uint8_t data_4_7 = (0xF0 & data);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f023 030f 	bic.w	r3, r3, #15
 8001362:	75bb      	strb	r3, [r7, #22]
  if(backlight){
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <lcd16x2_i2c_sendData+0xac>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <lcd16x2_i2c_sendData+0x62>
	  uint8_t i2cData[4] =
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	f043 030d 	orr.w	r3, r3, #13
 8001372:	b2db      	uxtb	r3, r3
 8001374:	743b      	strb	r3, [r7, #16]
 8001376:	7dbb      	ldrb	r3, [r7, #22]
 8001378:	f043 0309 	orr.w	r3, r3, #9
 800137c:	b2db      	uxtb	r3, r3
 800137e:	747b      	strb	r3, [r7, #17]
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	f043 030d 	orr.w	r3, r3, #13
 8001386:	b2db      	uxtb	r3, r3
 8001388:	74bb      	strb	r3, [r7, #18]
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	f043 0309 	orr.w	r3, r3, #9
 8001390:	b2db      	uxtb	r3, r3
 8001392:	74fb      	strb	r3, [r7, #19]
	        data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
	        data_4_7 | LCD_BK_LIGHT | LCD_RS,
	        data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
	        data_0_3 | LCD_BK_LIGHT | LCD_RS,
	    };
	  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <lcd16x2_i2c_sendData+0xb0>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <lcd16x2_i2c_sendData+0xb4>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b299      	uxth	r1, r3
 800139e:	f107 0210 	add.w	r2, r7, #16
 80013a2:	23c8      	movs	r3, #200	; 0xc8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2304      	movs	r3, #4
 80013a8:	f000 fdc4 	bl	8001f34 <HAL_I2C_Master_Transmit>

    	HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
    }


}
 80013ac:	e01f      	b.n	80013ee <lcd16x2_i2c_sendData+0xa2>
    	uint8_t i2cData[4] =
 80013ae:	7dbb      	ldrb	r3, [r7, #22]
 80013b0:	f043 0305 	orr.w	r3, r3, #5
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	733b      	strb	r3, [r7, #12]
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	737b      	strb	r3, [r7, #13]
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	f043 0305 	orr.w	r3, r3, #5
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	73bb      	strb	r3, [r7, #14]
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	73fb      	strb	r3, [r7, #15]
    	HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <lcd16x2_i2c_sendData+0xb0>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <lcd16x2_i2c_sendData+0xb4>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	b299      	uxth	r1, r3
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	23c8      	movs	r3, #200	; 0xc8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2304      	movs	r3, #4
 80013ea:	f000 fda3 	bl	8001f34 <HAL_I2C_Master_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000104 	.word	0x20000104
 8001400:	20000108 	.word	0x20000108

08001404 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 800140c:	2032      	movs	r0, #50	; 0x32
 800140e:	f000 f991 	bl	8001734 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8001412:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <lcd16x2_i2c_init+0xd0>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <lcd16x2_i2c_init+0xd0>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001420:	2205      	movs	r2, #5
 8001422:	214e      	movs	r1, #78	; 0x4e
 8001424:	f000 fe84 	bl	8002130 <HAL_I2C_IsDeviceReady>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d010      	beq.n	8001450 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <lcd16x2_i2c_init+0xd0>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001436:	2205      	movs	r2, #5
 8001438:	217e      	movs	r1, #126	; 0x7e
 800143a:	f000 fe79 	bl	8002130 <HAL_I2C_IsDeviceReady>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8001444:	2300      	movs	r3, #0
 8001446:	e040      	b.n	80014ca <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <lcd16x2_i2c_init+0xd4>)
 800144a:	227e      	movs	r2, #126	; 0x7e
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e002      	b.n	8001456 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <lcd16x2_i2c_init+0xd4>)
 8001452:	224e      	movs	r2, #78	; 0x4e
 8001454:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001456:	202d      	movs	r0, #45	; 0x2d
 8001458:	f000 f96c 	bl	8001734 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 800145c:	2030      	movs	r0, #48	; 0x30
 800145e:	f7ff ff1f 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8001462:	2005      	movs	r0, #5
 8001464:	f000 f966 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001468:	2030      	movs	r0, #48	; 0x30
 800146a:	f7ff ff19 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f000 f960 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001474:	2030      	movs	r0, #48	; 0x30
 8001476:	f7ff ff13 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800147a:	2008      	movs	r0, #8
 800147c:	f000 f95a 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001480:	2020      	movs	r0, #32
 8001482:	f7ff ff0d 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001486:	2008      	movs	r0, #8
 8001488:	f000 f954 	bl	8001734 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800148c:	2028      	movs	r0, #40	; 0x28
 800148e:	f7ff ff07 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 f94e 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001498:	2008      	movs	r0, #8
 800149a:	f7ff ff01 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f000 f948 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fefb 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80014aa:	2003      	movs	r0, #3
 80014ac:	f000 f942 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80014b0:	2006      	movs	r0, #6
 80014b2:	f7ff fef5 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 f93c 	bl	8001734 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 80014bc:	200c      	movs	r0, #12
 80014be:	f7ff feef 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 f936 	bl	8001734 <HAL_Delay>

  return true;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000104 	.word	0x20000104
 80014d8:	20000108 	.word	0x20000108

080014dc <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80014ec:	79bb      	ldrb	r3, [r7, #6]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001500:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fecb 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 800150a:	e007      	b.n	800151c <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001512:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fec2 	bl	80012a0 <lcd16x2_i2c_sendCommand>
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ffd6 	bl	80014dc <lcd16x2_i2c_setCursor>
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8001538:	2100      	movs	r1, #0
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff ffce 	bl	80014dc <lcd16x2_i2c_setCursor>
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fea9 	bl	80012a0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f8f0 	bl	8001734 <HAL_Delay>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8001558:	b40f      	push	{r0, r1, r2, r3}
 800155a:	b590      	push	{r4, r7, lr}
 800155c:	b089      	sub	sp, #36	; 0x24
 800155e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001564:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800156e:	4618      	mov	r0, r3
 8001570:	f002 f80e 	bl	8003590 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	e00a      	b.n	8001590 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	3320      	adds	r3, #32
 800157e:	443b      	add	r3, r7
 8001580:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fee1 	bl	800134c <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800158a:	7ffb      	ldrb	r3, [r7, #31]
 800158c:	3301      	adds	r3, #1
 800158e:	77fb      	strb	r3, [r7, #31]
 8001590:	7ffc      	ldrb	r4, [r7, #31]
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fdd8 	bl	800014c <strlen>
 800159c:	4603      	mov	r3, r0
 800159e:	429c      	cmp	r4, r3
 80015a0:	d202      	bcs.n	80015a8 <lcd16x2_i2c_printf+0x50>
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d9e8      	bls.n	800157a <lcd16x2_i2c_printf+0x22>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015b2:	b004      	add	sp, #16
 80015b4:	4770      	bx	lr
	...

080015b8 <delay>:
__IO uint32_t lcd_led_ticks;
__IO uint32_t button_press_ticks;
__IO uint32_t button_handler_ticks;


void delay(uint32_t delay_ms){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	ms_tick = 0;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <delay+0x28>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
	while(ms_tick < delay_ms){
 80015c6:	bf00      	nop
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <delay+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d8fa      	bhi.n	80015c8 <delay+0x10>

	}
}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	2000010c 	.word	0x2000010c

080015e4 <user_systic_handler>:
/*
 * This function handles the systic interrupt
 */
void user_systic_handler(){
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

	ms_tick++;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <user_systic_handler+0x6c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <user_systic_handler+0x6c>)
 80015f0:	6013      	str	r3, [r2, #0]


	if(backlight){
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <user_systic_handler+0x70>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <user_systic_handler+0x20>
		lcd_led_ticks++;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <user_systic_handler+0x74>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a15      	ldr	r2, [pc, #84]	; (8001658 <user_systic_handler+0x74>)
 8001602:	6013      	str	r3, [r2, #0]
	}

	if((lcd_led_ticks > 100000)&&(backlight)){
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <user_systic_handler+0x74>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <user_systic_handler+0x78>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d909      	bls.n	8001622 <user_systic_handler+0x3e>
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <user_systic_handler+0x70>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <user_systic_handler+0x3e>
		backlight = 0;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <user_systic_handler+0x70>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
		lcd_led_ticks=0;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <user_systic_handler+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
	}

	if(button_press_flag){
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <user_systic_handler+0x7c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <user_systic_handler+0x50>
		button_press_ticks++;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <user_systic_handler+0x80>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <user_systic_handler+0x80>)
 8001632:	6013      	str	r3, [r2, #0]
	}

	if(button_handler_flag){
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <user_systic_handler+0x84>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <user_systic_handler+0x62>
		button_handler_ticks++;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <user_systic_handler+0x88>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <user_systic_handler+0x88>)
 8001644:	6013      	str	r3, [r2, #0]
	}


}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000010c 	.word	0x2000010c
 8001654:	20000000 	.word	0x20000000
 8001658:	20000110 	.word	0x20000110
 800165c:	000186a0 	.word	0x000186a0
 8001660:	200000d0 	.word	0x200000d0
 8001664:	20000114 	.word	0x20000114
 8001668:	200000d1 	.word	0x200000d1
 800166c:	20000118 	.word	0x20000118

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_Init+0x28>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	; (8001698 <HAL_Init+0x28>)
 800167a:	f043 0310 	orr.w	r3, r3, #16
 800167e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f92b 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fd4a 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40022000 	.word	0x40022000

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f935 	bl	800192a <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f90b 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000004 	.word	0x20000004
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x1c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x20>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_IncTick+0x20>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	2000000c 	.word	0x2000000c
 800171c:	2000011c 	.word	0x2000011c

08001720 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b02      	ldr	r3, [pc, #8]	; (8001730 <HAL_GetTick+0x10>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	2000011c 	.word	0x2000011c

08001734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff fff0 	bl	8001720 <HAL_GetTick>
 8001740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d005      	beq.n	800175a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_Delay+0x44>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175a:	bf00      	nop
 800175c:	f7ff ffe0 	bl	8001720 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	429a      	cmp	r2, r3
 800176a:	d8f7      	bhi.n	800175c <HAL_Delay+0x28>
  {
  }
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000000c 	.word	0x2000000c

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff90 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff49 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff5e 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffb0 	bl	8001898 <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b08b      	sub	sp, #44	; 0x2c
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001956:	e169      	b.n	8001c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001958:	2201      	movs	r2, #1
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 8158 	bne.w	8001c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a9a      	ldr	r2, [pc, #616]	; (8001be4 <HAL_GPIO_Init+0x2a0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d05e      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001980:	4a98      	ldr	r2, [pc, #608]	; (8001be4 <HAL_GPIO_Init+0x2a0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d875      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001986:	4a98      	ldr	r2, [pc, #608]	; (8001be8 <HAL_GPIO_Init+0x2a4>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d058      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 800198c:	4a96      	ldr	r2, [pc, #600]	; (8001be8 <HAL_GPIO_Init+0x2a4>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d86f      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 8001992:	4a96      	ldr	r2, [pc, #600]	; (8001bec <HAL_GPIO_Init+0x2a8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d052      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 8001998:	4a94      	ldr	r2, [pc, #592]	; (8001bec <HAL_GPIO_Init+0x2a8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d869      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 800199e:	4a94      	ldr	r2, [pc, #592]	; (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d04c      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019a4:	4a92      	ldr	r2, [pc, #584]	; (8001bf0 <HAL_GPIO_Init+0x2ac>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d863      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019aa:	4a92      	ldr	r2, [pc, #584]	; (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d046      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
 80019b0:	4a90      	ldr	r2, [pc, #576]	; (8001bf4 <HAL_GPIO_Init+0x2b0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d85d      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019b6:	2b12      	cmp	r3, #18
 80019b8:	d82a      	bhi.n	8001a10 <HAL_GPIO_Init+0xcc>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d859      	bhi.n	8001a72 <HAL_GPIO_Init+0x12e>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <HAL_GPIO_Init+0x80>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001a3f 	.word	0x08001a3f
 80019c8:	08001a19 	.word	0x08001a19
 80019cc:	08001a2b 	.word	0x08001a2b
 80019d0:	08001a6d 	.word	0x08001a6d
 80019d4:	08001a73 	.word	0x08001a73
 80019d8:	08001a73 	.word	0x08001a73
 80019dc:	08001a73 	.word	0x08001a73
 80019e0:	08001a73 	.word	0x08001a73
 80019e4:	08001a73 	.word	0x08001a73
 80019e8:	08001a73 	.word	0x08001a73
 80019ec:	08001a73 	.word	0x08001a73
 80019f0:	08001a73 	.word	0x08001a73
 80019f4:	08001a73 	.word	0x08001a73
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a73 	.word	0x08001a73
 8001a00:	08001a73 	.word	0x08001a73
 8001a04:	08001a73 	.word	0x08001a73
 8001a08:	08001a21 	.word	0x08001a21
 8001a0c:	08001a35 	.word	0x08001a35
 8001a10:	4a79      	ldr	r2, [pc, #484]	; (8001bf8 <HAL_GPIO_Init+0x2b4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a16:	e02c      	b.n	8001a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e029      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	3304      	adds	r3, #4
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e024      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	3308      	adds	r3, #8
 8001a30:	623b      	str	r3, [r7, #32]
          break;
 8001a32:	e01f      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	623b      	str	r3, [r7, #32]
          break;
 8001a3c:	e01a      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d102      	bne.n	8001a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a46:	2304      	movs	r3, #4
 8001a48:	623b      	str	r3, [r7, #32]
          break;
 8001a4a:	e013      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	611a      	str	r2, [r3, #16]
          break;
 8001a5e:	e009      	b.n	8001a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	615a      	str	r2, [r3, #20]
          break;
 8001a6a:	e003      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x130>
          break;
 8001a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	d801      	bhi.n	8001a7e <HAL_GPIO_Init+0x13a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	e001      	b.n	8001a82 <HAL_GPIO_Init+0x13e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	d802      	bhi.n	8001a90 <HAL_GPIO_Init+0x14c>
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0x152>
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	3b08      	subs	r3, #8
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	6a39      	ldr	r1, [r7, #32]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 80b1 	beq.w	8001c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_GPIO_Init+0x2b8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a40      	ldr	r2, [pc, #256]	; (8001c04 <HAL_GPIO_Init+0x2c0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_GPIO_Init+0x1ec>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a3f      	ldr	r2, [pc, #252]	; (8001c08 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3e      	ldr	r2, [pc, #248]	; (8001c0c <HAL_GPIO_Init+0x2c8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1e4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a3d      	ldr	r2, [pc, #244]	; (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b24:	2304      	movs	r3, #4
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1ee>
 8001b30:	2300      	movs	r3, #0
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b42:	492f      	ldr	r1, [pc, #188]	; (8001c00 <HAL_GPIO_Init+0x2bc>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	492c      	ldr	r1, [pc, #176]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	4928      	ldr	r1, [pc, #160]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4922      	ldr	r1, [pc, #136]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b92:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	491e      	ldr	r1, [pc, #120]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	4918      	ldr	r1, [pc, #96]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4914      	ldr	r1, [pc, #80]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d021      	beq.n	8001c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	e021      	b.n	8001c26 <HAL_GPIO_Init+0x2e2>
 8001be2:	bf00      	nop
 8001be4:	10320000 	.word	0x10320000
 8001be8:	10310000 	.word	0x10310000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	10210000 	.word	0x10210000
 8001bf4:	10120000 	.word	0x10120000
 8001bf8:	10110000 	.word	0x10110000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	40010800 	.word	0x40010800
 8001c08:	40010c00 	.word	0x40010c00
 8001c0c:	40011000 	.word	0x40011000
 8001c10:	40011400 	.word	0x40011400
 8001c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4909      	ldr	r1, [pc, #36]	; (8001c48 <HAL_GPIO_Init+0x304>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f47f ae8e 	bne.w	8001958 <HAL_GPIO_Init+0x14>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	372c      	adds	r7, #44	; 0x2c
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40010400 	.word	0x40010400

08001c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	e001      	b.n	8001c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	807b      	strh	r3, [r7, #2]
 8001c86:	4613      	mov	r3, r2
 8001c88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8a:	787b      	ldrb	r3, [r7, #1]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c90:	887a      	ldrh	r2, [r7, #2]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	041a      	lsls	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	611a      	str	r2, [r3, #16]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e12b      	b.n	8001f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d106      	bne.n	8001cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7fe fad4 	bl	8000280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d10:	f001 f96c 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8001d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a81      	ldr	r2, [pc, #516]	; (8001f20 <HAL_I2C_Init+0x274>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d807      	bhi.n	8001d30 <HAL_I2C_Init+0x84>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4a80      	ldr	r2, [pc, #512]	; (8001f24 <HAL_I2C_Init+0x278>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	bf94      	ite	ls
 8001d28:	2301      	movls	r3, #1
 8001d2a:	2300      	movhi	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e006      	b.n	8001d3e <HAL_I2C_Init+0x92>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a7d      	ldr	r2, [pc, #500]	; (8001f28 <HAL_I2C_Init+0x27c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bf94      	ite	ls
 8001d38:	2301      	movls	r3, #1
 8001d3a:	2300      	movhi	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0e7      	b.n	8001f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4a78      	ldr	r2, [pc, #480]	; (8001f2c <HAL_I2C_Init+0x280>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9b      	lsrs	r3, r3, #18
 8001d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_I2C_Init+0x274>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d802      	bhi.n	8001d80 <HAL_I2C_Init+0xd4>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	e009      	b.n	8001d94 <HAL_I2C_Init+0xe8>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4a69      	ldr	r2, [pc, #420]	; (8001f30 <HAL_I2C_Init+0x284>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	3301      	adds	r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	495c      	ldr	r1, [pc, #368]	; (8001f20 <HAL_I2C_Init+0x274>)
 8001db0:	428b      	cmp	r3, r1
 8001db2:	d819      	bhi.n	8001de8 <HAL_I2C_Init+0x13c>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1e59      	subs	r1, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc2:	1c59      	adds	r1, r3, #1
 8001dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dc8:	400b      	ands	r3, r1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_I2C_Init+0x138>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1e59      	subs	r1, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de2:	e051      	b.n	8001e88 <HAL_I2C_Init+0x1dc>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e04f      	b.n	8001e88 <HAL_I2C_Init+0x1dc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d111      	bne.n	8001e14 <HAL_I2C_Init+0x168>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	e012      	b.n	8001e3a <HAL_I2C_Init+0x18e>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1e58      	subs	r0, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	0099      	lsls	r1, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf0c      	ite	eq
 8001e34:	2301      	moveq	r3, #1
 8001e36:	2300      	movne	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Init+0x196>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e022      	b.n	8001e88 <HAL_I2C_Init+0x1dc>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10e      	bne.n	8001e68 <HAL_I2C_Init+0x1bc>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e58      	subs	r0, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	440b      	add	r3, r1
 8001e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e66:	e00f      	b.n	8001e88 <HAL_I2C_Init+0x1dc>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1e58      	subs	r0, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	0099      	lsls	r1, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	6809      	ldr	r1, [r1, #0]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6911      	ldr	r1, [r2, #16]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68d2      	ldr	r2, [r2, #12]
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	000186a0 	.word	0x000186a0
 8001f24:	001e847f 	.word	0x001e847f
 8001f28:	003d08ff 	.word	0x003d08ff
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	10624dd3 	.word	0x10624dd3

08001f34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	460b      	mov	r3, r1
 8001f42:	817b      	strh	r3, [r7, #10]
 8001f44:	4613      	mov	r3, r2
 8001f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff fbea 	bl	8001720 <HAL_GetTick>
 8001f4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	f040 80e0 	bne.w	800211c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2319      	movs	r3, #25
 8001f62:	2201      	movs	r2, #1
 8001f64:	4970      	ldr	r1, [pc, #448]	; (8002128 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa92 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0d3      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2C_Master_Transmit+0x50>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e0cc      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d007      	beq.n	8001faa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2221      	movs	r2, #33	; 0x21
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	893a      	ldrh	r2, [r7, #8]
 8001fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_I2C_Master_Transmit+0x1f8>)
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fec:	8979      	ldrh	r1, [r7, #10]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	6a3a      	ldr	r2, [r7, #32]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 f9ca 	bl	800238c <I2C_MasterRequestWrite>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e08d      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002018:	e066      	b.n	80020e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	6a39      	ldr	r1, [r7, #32]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fb50 	bl	80026c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b04      	cmp	r3, #4
 8002030:	d107      	bne.n	8002042 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	781a      	ldrb	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d11b      	bne.n	80020bc <HAL_I2C_Master_Transmit+0x188>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	2b00      	cmp	r3, #0
 800208a:	d017      	beq.n	80020bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	781a      	ldrb	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	6a39      	ldr	r1, [r7, #32]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fb47 	bl	8002754 <I2C_WaitOnBTFFlagUntilTimeout>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d107      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e01a      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d194      	bne.n	800201a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e000      	b.n	800211e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800211c:	2302      	movs	r3, #2
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	00100002 	.word	0x00100002
 800212c:	ffff0000 	.word	0xffff0000

08002130 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff faee 	bl	8001720 <HAL_GetTick>
 8002144:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 8111 	bne.w	800237a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2319      	movs	r3, #25
 800215e:	2201      	movs	r2, #1
 8002160:	4988      	ldr	r1, [pc, #544]	; (8002384 <HAL_I2C_IsDeviceReady+0x254>)
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f000 f994 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	e104      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_IsDeviceReady+0x50>
 800217c:	2302      	movs	r3, #2
 800217e:	e0fd      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d007      	beq.n	80021a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2224      	movs	r2, #36	; 0x24
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a70      	ldr	r2, [pc, #448]	; (8002388 <HAL_I2C_IsDeviceReady+0x258>)
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f952 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002200:	d103      	bne.n	800220a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0b6      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800221c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff fa7f 	bl	8001720 <HAL_GetTick>
 8002222:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b02      	cmp	r3, #2
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002252:	e025      	b.n	80022a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7ff fa64 	bl	8001720 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <HAL_I2C_IsDeviceReady+0x13a>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	22a0      	movs	r2, #160	; 0xa0
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2ba0      	cmp	r3, #160	; 0xa0
 80022aa:	d005      	beq.n	80022b8 <HAL_I2C_IsDeviceReady+0x188>
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d102      	bne.n	80022b8 <HAL_I2C_IsDeviceReady+0x188>
 80022b2:	7dbb      	ldrb	r3, [r7, #22]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0cd      	beq.n	8002254 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d129      	bne.n	8002322 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2319      	movs	r3, #25
 80022fa:	2201      	movs	r2, #1
 80022fc:	4921      	ldr	r1, [pc, #132]	; (8002384 <HAL_I2C_IsDeviceReady+0x254>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f8c6 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e036      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e02c      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002330:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800233a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_I2C_IsDeviceReady+0x254>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f8a2 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e012      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	3301      	adds	r3, #1
 800235a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	f4ff af32 	bcc.w	80021ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800237a:	2302      	movs	r3, #2
  }
}
 800237c:	4618      	mov	r0, r3
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	00100002 	.word	0x00100002
 8002388:	ffff0000 	.word	0xffff0000

0800238c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	607a      	str	r2, [r7, #4]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d006      	beq.n	80023b6 <I2C_MasterRequestWrite+0x2a>
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d003      	beq.n	80023b6 <I2C_MasterRequestWrite+0x2a>
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b4:	d108      	bne.n	80023c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e00b      	b.n	80023e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	2b12      	cmp	r3, #18
 80023ce:	d107      	bne.n	80023e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 f84f 	bl	8002490 <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002406:	d103      	bne.n	8002410 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e035      	b.n	8002480 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800241c:	d108      	bne.n	8002430 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800242c:	611a      	str	r2, [r3, #16]
 800242e:	e01b      	b.n	8002468 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002430:	897b      	ldrh	r3, [r7, #10]
 8002432:	11db      	asrs	r3, r3, #7
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 0306 	and.w	r3, r3, #6
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f063 030f 	orn	r3, r3, #15
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	490e      	ldr	r1, [pc, #56]	; (8002488 <I2C_MasterRequestWrite+0xfc>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f898 	bl	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e010      	b.n	8002480 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800245e:	897b      	ldrh	r3, [r7, #10]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <I2C_MasterRequestWrite+0x100>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f888 	bl	8002584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	00010008 	.word	0x00010008
 800248c:	00010002 	.word	0x00010002

08002490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024a0:	e048      	b.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d044      	beq.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024aa:	f7ff f939 	bl	8001720 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d302      	bcc.n	80024c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d139      	bne.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10d      	bne.n	80024e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	43da      	mvns	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4013      	ands	r3, r2
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	e00c      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	429a      	cmp	r2, r3
 8002504:	d116      	bne.n	8002534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e023      	b.n	800257c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10d      	bne.n	800255a <I2C_WaitOnFlagUntilTimeout+0xca>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	e00c      	b.n	8002574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	429a      	cmp	r2, r3
 8002578:	d093      	beq.n	80024a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002592:	e071      	b.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a2:	d123      	bne.n	80025ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f043 0204 	orr.w	r2, r3, #4
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e067      	b.n	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d041      	beq.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f4:	f7ff f894 	bl	8001720 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	d302      	bcc.n	800260a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d136      	bne.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10c      	bne.n	800262e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	43da      	mvns	r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf14      	ite	ne
 8002626:	2301      	movne	r3, #1
 8002628:	2300      	moveq	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	e00b      	b.n	8002646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	43da      	mvns	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	4013      	ands	r3, r2
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0220 	orr.w	r2, r3, #32
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e021      	b.n	80026bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	0c1b      	lsrs	r3, r3, #16
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10c      	bne.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	43da      	mvns	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4013      	ands	r3, r2
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e00b      	b.n	80026b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4013      	ands	r3, r2
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f47f af6d 	bne.w	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d0:	e034      	b.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f886 	bl	80027e4 <I2C_IsAcknowledgeFailed>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e034      	b.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d028      	beq.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ea:	f7ff f819 	bl	8001720 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11d      	bne.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b80      	cmp	r3, #128	; 0x80
 800270c:	d016      	beq.n	800273c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e007      	b.n	800274c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d1c3      	bne.n	80026d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002760:	e034      	b.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f83e 	bl	80027e4 <I2C_IsAcknowledgeFailed>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e034      	b.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d028      	beq.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7fe ffd1 	bl	8001720 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	429a      	cmp	r2, r3
 8002788:	d302      	bcc.n	8002790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d11d      	bne.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d016      	beq.n	80027cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e007      	b.n	80027dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	f003 0304 	and.w	r3, r3, #4
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d1c3      	bne.n	8002762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d11b      	bne.n	8002834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f043 0204 	orr.w	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	420e0020 	.word	0x420e0020

08002858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e272      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8087 	beq.w	8002986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002878:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b04      	cmp	r3, #4
 8002882:	d00c      	beq.n	800289e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002884:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b08      	cmp	r3, #8
 800288e:	d112      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
 8002890:	4b8c      	ldr	r3, [pc, #560]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d10b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d06c      	beq.n	8002984 <HAL_RCC_OscConfig+0x12c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d168      	bne.n	8002984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e24c      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x76>
 80028c0:	4b80      	ldr	r3, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a7f      	ldr	r2, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x98>
 80028d6:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xbc>
 80028fa:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 8002914:	4b6b      	ldr	r3, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b68      	ldr	r3, [pc, #416]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a67      	ldr	r2, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fef4 	bl	8001720 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fef0 	bl	8001720 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e200      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xe4>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fee0 	bl	8001720 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fedc 	bl	8001720 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1ec      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x10c>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002992:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800299e:	4b49      	ldr	r3, [pc, #292]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d11c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x18c>
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x176>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e1c0      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4939      	ldr	r1, [pc, #228]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e03a      	b.n	8002a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d020      	beq.n	8002a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x270>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe95 	bl	8001720 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fa:	f7fe fe91 	bl	8001720 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e1a1      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <HAL_RCC_OscConfig+0x270>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe74 	bl	8001720 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3c:	f7fe fe70 	bl	8001720 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e180      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0308 	and.w	r3, r3, #8
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d03a      	beq.n	8002adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d019      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a74:	f7fe fe54 	bl	8001720 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fe50 	bl	8001720 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e160      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f000 face 	bl	800303c <RCC_Delay>
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCC_OscConfig+0x274>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa8:	f7fe fe3a 	bl	8001720 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aae:	e00f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fe36 	bl	8001720 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d908      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e146      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	42420000 	.word	0x42420000
 8002acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e9      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80a6 	beq.w	8002c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b8b      	ldr	r3, [pc, #556]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10d      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4a87      	ldr	r2, [pc, #540]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	61d3      	str	r3, [r2, #28]
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b82      	ldr	r3, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x4c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7e      	ldr	r2, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x4c8>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fdf7 	bl	8001720 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fdf3 	bl	8001720 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e103      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_OscConfig+0x4c8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x312>
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e02d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x36e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x334>
 8002b72:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6213      	str	r3, [r2, #32]
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a66      	ldr	r2, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0304 	bic.w	r3, r3, #4
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	e01c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x36e>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b05      	cmp	r3, #5
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x356>
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a60      	ldr	r2, [pc, #384]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a5d      	ldr	r2, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	e00b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x36e>
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	f023 0301 	bic.w	r3, r3, #1
 8002bb8:	6213      	str	r3, [r2, #32]
 8002bba:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d015      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7fe fda7 	bl	8001720 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fda3 	bl	8001720 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0b1      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b4b      	ldr	r3, [pc, #300]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x37e>
 8002bf8:	e014      	b.n	8002c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fd91 	bl	8001720 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fd8d 	bl	8001720 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e09b      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c18:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d105      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d061      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d146      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fe fd61 	bl	8001720 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fe fd5d 	bl	8001720 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e06d      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d108      	bne.n	8002c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4921      	ldr	r1, [pc, #132]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a19      	ldr	r1, [r3, #32]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	430b      	orrs	r3, r1
 8002cae:	491b      	ldr	r1, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_OscConfig+0x4cc>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fd31 	bl	8001720 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fd2d 	bl	8001720 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e03d      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x46a>
 8002ce0:	e035      	b.n	8002d4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fd1a 	bl	8001720 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fd16 	bl	8001720 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e026      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x498>
 8002d0e:	e01e      	b.n	8002d4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e019      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
 8002d24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RCC_OscConfig+0x500>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0d0      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 0207 	bic.w	r2, r3, #7
 8002d86:	4965      	ldr	r1, [pc, #404]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b63      	ldr	r3, [pc, #396]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e0b8      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd0:	4b53      	ldr	r3, [pc, #332]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4a52      	ldr	r2, [pc, #328]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b50      	ldr	r3, [pc, #320]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d040      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d115      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e07f      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e073      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06b      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f023 0203 	bic.w	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4936      	ldr	r1, [pc, #216]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fc68 	bl	8001720 <HAL_GetTick>
 8002e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f7fe fc64 	bl	8001720 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e053      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 020c 	and.w	r2, r3, #12
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d1eb      	bne.n	8002e54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d210      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 0207 	bic.w	r2, r3, #7
 8002e92:	4922      	ldr	r1, [pc, #136]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e032      	b.n	8002f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d008      	beq.n	8002eca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eea:	f000 f821 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCC_ClockConfig+0x1c8>)
 8002efc:	5ccb      	ldrb	r3, [r1, r3]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	4a09      	ldr	r2, [pc, #36]	; (8002f28 <HAL_RCC_ClockConfig+0x1cc>)
 8002f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1d0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fbc6 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	080040d8 	.word	0x080040d8
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	20000008 	.word	0x20000008

08002f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x30>
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d003      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x36>
 8002f5e:	e027      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f62:	613b      	str	r3, [r7, #16]
      break;
 8002f64:	e027      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	0c9b      	lsrs	r3, r3, #18
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f70:	5cd3      	ldrb	r3, [r2, r3]
 8002f72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	0c5b      	lsrs	r3, r3, #17
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f8a:	5cd3      	ldrb	r3, [r2, r3]
 8002f8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e004      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fa4:	fb02 f303 	mul.w	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	613b      	str	r3, [r7, #16]
      break;
 8002fae:	e002      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb2:	613b      	str	r3, [r7, #16]
      break;
 8002fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb6:	693b      	ldr	r3, [r7, #16]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	007a1200 	.word	0x007a1200
 8002fcc:	080040f0 	.word	0x080040f0
 8002fd0:	08004100 	.word	0x08004100
 8002fd4:	003d0900 	.word	0x003d0900

08002fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	20000004 	.word	0x20000004

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff0:	f7ff fff2 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	080040e8 	.word	0x080040e8

08003014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003018:	f7ff ffde 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 800301c:	4602      	mov	r2, r0
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	0adb      	lsrs	r3, r3, #11
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	4903      	ldr	r1, [pc, #12]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800302a:	5ccb      	ldrb	r3, [r1, r3]
 800302c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	080040e8 	.word	0x080040e8

0800303c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <RCC_Delay+0x34>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <RCC_Delay+0x38>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	0a5b      	lsrs	r3, r3, #9
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003058:	bf00      	nop
  }
  while (Delay --);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	60fa      	str	r2, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f9      	bne.n	8003058 <RCC_Delay+0x1c>
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	20000004 	.word	0x20000004
 8003074:	10624dd3 	.word	0x10624dd3

08003078 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d07d      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	4a4b      	ldr	r2, [pc, #300]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	61d3      	str	r3, [r2, #28]
 80030b0:	4b49      	ldr	r3, [pc, #292]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d118      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030cc:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a42      	ldr	r2, [pc, #264]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d8:	f7fe fb22 	bl	8001720 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	e008      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e0:	f7fe fb1e 	bl	8001720 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e06d      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d02e      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d027      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800311c:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003124:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003132:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d014      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe faed 	bl	8001720 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	e00a      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800314a:	f7fe fae9 	bl	8001720 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f241 3288 	movw	r2, #5000	; 0x1388
 8003158:	4293      	cmp	r3, r2
 800315a:	d901      	bls.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e036      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ee      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4917      	ldr	r1, [pc, #92]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	4313      	orrs	r3, r2
 800317c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800317e:	7dfb      	ldrb	r3, [r7, #23]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d105      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	490b      	ldr	r1, [pc, #44]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42420440 	.word	0x42420440

080031e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	2300      	movs	r3, #0
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b10      	cmp	r3, #16
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b10      	cmp	r3, #16
 800320a:	f200 808a 	bhi.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d045      	beq.n	80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d075      	beq.n	8003306 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800321a:	e082      	b.n	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003222:	4b45      	ldr	r3, [pc, #276]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d07b      	beq.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	0c9b      	lsrs	r3, r3, #18
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a41      	ldr	r2, [pc, #260]	; (800333c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d015      	beq.n	8003272 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003246:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	0c5b      	lsrs	r3, r3, #17
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003252:	5cd3      	ldrb	r3, [r2, r3]
 8003254:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003260:	4a38      	ldr	r2, [pc, #224]	; (8003344 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fbb2 f2f3 	udiv	r2, r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e004      	b.n	800327c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4a34      	ldr	r2, [pc, #208]	; (8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800327c:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003288:	d102      	bne.n	8003290 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	61bb      	str	r3, [r7, #24]
      break;
 800328e:	e04a      	b.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4a2d      	ldr	r2, [pc, #180]	; (800334c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
      break;
 800329e:	e042      	b.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b0:	d108      	bne.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80032bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e01f      	b.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ce:	d109      	bne.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80032dc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e00f      	b.n	8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ee:	d11c      	bne.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80032f0:	4b11      	ldr	r3, [pc, #68]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80032fc:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003300:	61bb      	str	r3, [r7, #24]
      break;
 8003302:	e012      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003304:	e011      	b.n	800332a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003306:	f7ff fe85 	bl	8003014 <HAL_RCC_GetPCLK2Freq>
 800330a:	4602      	mov	r2, r0
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0b9b      	lsrs	r3, r3, #14
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	3301      	adds	r3, #1
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	61bb      	str	r3, [r7, #24]
      break;
 8003320:	e004      	b.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003322:	bf00      	nop
 8003324:	e002      	b.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003326:	bf00      	nop
 8003328:	e000      	b.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800332a:	bf00      	nop
    }
  }
  return (frequency);
 800332c:	69bb      	ldr	r3, [r7, #24]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	08004104 	.word	0x08004104
 8003340:	08004114 	.word	0x08004114
 8003344:	007a1200 	.word	0x007a1200
 8003348:	003d0900 	.word	0x003d0900
 800334c:	aaaaaaab 	.word	0xaaaaaaab

08003350 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e07a      	b.n	800345c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7c5b      	ldrb	r3, [r3, #17]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd feb0 	bl	80010dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f870 	bl	8003468 <HAL_RTC_WaitForSynchro>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2204      	movs	r2, #4
 8003392:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e061      	b.n	800345c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f892 	bl	80034c2 <RTC_EnterInitMode>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d004      	beq.n	80033ae <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e056      	b.n	800345c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0207 	bic.w	r2, r2, #7
 80033bc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <HAL_RTC_Init+0x114>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_RTC_Init+0x114>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <HAL_RTC_Init+0x114>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4921      	ldr	r1, [pc, #132]	; (8003464 <HAL_RTC_Init+0x114>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d003      	beq.n	80033f6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e00e      	b.n	8003414 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff fef4 	bl	80031e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80033fc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2204      	movs	r2, #4
 8003408:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e026      	b.n	800345c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b01      	subs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	0c1a      	lsrs	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f002 020f 	and.w	r2, r2, #15
 8003420:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	b292      	uxth	r2, r2
 800342a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f870 	bl	8003512 <RTC_ExitInitMode>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d004      	beq.n	8003442 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2204      	movs	r2, #4
 800343c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40006c00 	.word	0x40006c00

08003468 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e01d      	b.n	80034ba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0208 	bic.w	r2, r2, #8
 800348c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800348e:	f7fe f947 	bl	8001720 <HAL_GetTick>
 8003492:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003494:	e009      	b.n	80034aa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003496:	f7fe f943 	bl	8001720 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a4:	d901      	bls.n	80034aa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e007      	b.n	80034ba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0ee      	beq.n	8003496 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b084      	sub	sp, #16
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80034ce:	f7fe f927 	bl	8001720 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034d4:	e009      	b.n	80034ea <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034d6:	f7fe f923 	bl	8001720 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e4:	d901      	bls.n	80034ea <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e00f      	b.n	800350a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0320 	and.w	r3, r3, #32
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0ee      	beq.n	80034d6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0210 	orr.w	r2, r2, #16
 8003506:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0210 	bic.w	r2, r2, #16
 800352c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800352e:	f7fe f8f7 	bl	8001720 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003534:	e009      	b.n	800354a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003536:	f7fe f8f3 	bl	8001720 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003544:	d901      	bls.n	800354a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e007      	b.n	800355a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ee      	beq.n	8003536 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <_vsiprintf_r>:
 8003564:	b500      	push	{lr}
 8003566:	b09b      	sub	sp, #108	; 0x6c
 8003568:	9100      	str	r1, [sp, #0]
 800356a:	9104      	str	r1, [sp, #16]
 800356c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003570:	9105      	str	r1, [sp, #20]
 8003572:	9102      	str	r1, [sp, #8]
 8003574:	4905      	ldr	r1, [pc, #20]	; (800358c <_vsiprintf_r+0x28>)
 8003576:	9103      	str	r1, [sp, #12]
 8003578:	4669      	mov	r1, sp
 800357a:	f000 f995 	bl	80038a8 <_svfiprintf_r>
 800357e:	2200      	movs	r2, #0
 8003580:	9b00      	ldr	r3, [sp, #0]
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	b01b      	add	sp, #108	; 0x6c
 8003586:	f85d fb04 	ldr.w	pc, [sp], #4
 800358a:	bf00      	nop
 800358c:	ffff0208 	.word	0xffff0208

08003590 <vsiprintf>:
 8003590:	4613      	mov	r3, r2
 8003592:	460a      	mov	r2, r1
 8003594:	4601      	mov	r1, r0
 8003596:	4802      	ldr	r0, [pc, #8]	; (80035a0 <vsiprintf+0x10>)
 8003598:	6800      	ldr	r0, [r0, #0]
 800359a:	f7ff bfe3 	b.w	8003564 <_vsiprintf_r>
 800359e:	bf00      	nop
 80035a0:	2000005c 	.word	0x2000005c

080035a4 <memset>:
 80035a4:	4603      	mov	r3, r0
 80035a6:	4402      	add	r2, r0
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d100      	bne.n	80035ae <memset+0xa>
 80035ac:	4770      	bx	lr
 80035ae:	f803 1b01 	strb.w	r1, [r3], #1
 80035b2:	e7f9      	b.n	80035a8 <memset+0x4>

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000005c 	.word	0x2000005c

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	2600      	movs	r6, #0
 80035c4:	4d0c      	ldr	r5, [pc, #48]	; (80035f8 <__libc_init_array+0x38>)
 80035c6:	4c0d      	ldr	r4, [pc, #52]	; (80035fc <__libc_init_array+0x3c>)
 80035c8:	1b64      	subs	r4, r4, r5
 80035ca:	10a4      	asrs	r4, r4, #2
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	f000 fc7a 	bl	8003ec8 <_init>
 80035d4:	2600      	movs	r6, #0
 80035d6:	4d0a      	ldr	r5, [pc, #40]	; (8003600 <__libc_init_array+0x40>)
 80035d8:	4c0a      	ldr	r4, [pc, #40]	; (8003604 <__libc_init_array+0x44>)
 80035da:	1b64      	subs	r4, r4, r5
 80035dc:	10a4      	asrs	r4, r4, #2
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	0800414c 	.word	0x0800414c
 80035fc:	0800414c 	.word	0x0800414c
 8003600:	0800414c 	.word	0x0800414c
 8003604:	08004150 	.word	0x08004150

08003608 <__retarget_lock_acquire_recursive>:
 8003608:	4770      	bx	lr

0800360a <__retarget_lock_release_recursive>:
 800360a:	4770      	bx	lr

0800360c <_free_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4605      	mov	r5, r0
 8003610:	2900      	cmp	r1, #0
 8003612:	d040      	beq.n	8003696 <_free_r+0x8a>
 8003614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003618:	1f0c      	subs	r4, r1, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfb8      	it	lt
 800361e:	18e4      	addlt	r4, r4, r3
 8003620:	f000 f8dc 	bl	80037dc <__malloc_lock>
 8003624:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <_free_r+0x8c>)
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	b933      	cbnz	r3, 8003638 <_free_r+0x2c>
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	6014      	str	r4, [r2, #0]
 800362e:	4628      	mov	r0, r5
 8003630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003634:	f000 b8d8 	b.w	80037e8 <__malloc_unlock>
 8003638:	42a3      	cmp	r3, r4
 800363a:	d908      	bls.n	800364e <_free_r+0x42>
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	1821      	adds	r1, r4, r0
 8003640:	428b      	cmp	r3, r1
 8003642:	bf01      	itttt	eq
 8003644:	6819      	ldreq	r1, [r3, #0]
 8003646:	685b      	ldreq	r3, [r3, #4]
 8003648:	1809      	addeq	r1, r1, r0
 800364a:	6021      	streq	r1, [r4, #0]
 800364c:	e7ed      	b.n	800362a <_free_r+0x1e>
 800364e:	461a      	mov	r2, r3
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	b10b      	cbz	r3, 8003658 <_free_r+0x4c>
 8003654:	42a3      	cmp	r3, r4
 8003656:	d9fa      	bls.n	800364e <_free_r+0x42>
 8003658:	6811      	ldr	r1, [r2, #0]
 800365a:	1850      	adds	r0, r2, r1
 800365c:	42a0      	cmp	r0, r4
 800365e:	d10b      	bne.n	8003678 <_free_r+0x6c>
 8003660:	6820      	ldr	r0, [r4, #0]
 8003662:	4401      	add	r1, r0
 8003664:	1850      	adds	r0, r2, r1
 8003666:	4283      	cmp	r3, r0
 8003668:	6011      	str	r1, [r2, #0]
 800366a:	d1e0      	bne.n	800362e <_free_r+0x22>
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4408      	add	r0, r1
 8003672:	6010      	str	r0, [r2, #0]
 8003674:	6053      	str	r3, [r2, #4]
 8003676:	e7da      	b.n	800362e <_free_r+0x22>
 8003678:	d902      	bls.n	8003680 <_free_r+0x74>
 800367a:	230c      	movs	r3, #12
 800367c:	602b      	str	r3, [r5, #0]
 800367e:	e7d6      	b.n	800362e <_free_r+0x22>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	1821      	adds	r1, r4, r0
 8003684:	428b      	cmp	r3, r1
 8003686:	bf01      	itttt	eq
 8003688:	6819      	ldreq	r1, [r3, #0]
 800368a:	685b      	ldreq	r3, [r3, #4]
 800368c:	1809      	addeq	r1, r1, r0
 800368e:	6021      	streq	r1, [r4, #0]
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	6054      	str	r4, [r2, #4]
 8003694:	e7cb      	b.n	800362e <_free_r+0x22>
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	20000260 	.word	0x20000260

0800369c <sbrk_aligned>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4e0e      	ldr	r6, [pc, #56]	; (80036d8 <sbrk_aligned+0x3c>)
 80036a0:	460c      	mov	r4, r1
 80036a2:	6831      	ldr	r1, [r6, #0]
 80036a4:	4605      	mov	r5, r0
 80036a6:	b911      	cbnz	r1, 80036ae <sbrk_aligned+0x12>
 80036a8:	f000 fbaa 	bl	8003e00 <_sbrk_r>
 80036ac:	6030      	str	r0, [r6, #0]
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fba5 	bl	8003e00 <_sbrk_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d00a      	beq.n	80036d0 <sbrk_aligned+0x34>
 80036ba:	1cc4      	adds	r4, r0, #3
 80036bc:	f024 0403 	bic.w	r4, r4, #3
 80036c0:	42a0      	cmp	r0, r4
 80036c2:	d007      	beq.n	80036d4 <sbrk_aligned+0x38>
 80036c4:	1a21      	subs	r1, r4, r0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f000 fb9a 	bl	8003e00 <_sbrk_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	d101      	bne.n	80036d4 <sbrk_aligned+0x38>
 80036d0:	f04f 34ff 	mov.w	r4, #4294967295
 80036d4:	4620      	mov	r0, r4
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	20000264 	.word	0x20000264

080036dc <_malloc_r>:
 80036dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e0:	1ccd      	adds	r5, r1, #3
 80036e2:	f025 0503 	bic.w	r5, r5, #3
 80036e6:	3508      	adds	r5, #8
 80036e8:	2d0c      	cmp	r5, #12
 80036ea:	bf38      	it	cc
 80036ec:	250c      	movcc	r5, #12
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	4607      	mov	r7, r0
 80036f2:	db01      	blt.n	80036f8 <_malloc_r+0x1c>
 80036f4:	42a9      	cmp	r1, r5
 80036f6:	d905      	bls.n	8003704 <_malloc_r+0x28>
 80036f8:	230c      	movs	r3, #12
 80036fa:	2600      	movs	r6, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4630      	mov	r0, r6
 8003700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80037d8 <_malloc_r+0xfc>
 8003708:	f000 f868 	bl	80037dc <__malloc_lock>
 800370c:	f8d8 3000 	ldr.w	r3, [r8]
 8003710:	461c      	mov	r4, r3
 8003712:	bb5c      	cbnz	r4, 800376c <_malloc_r+0x90>
 8003714:	4629      	mov	r1, r5
 8003716:	4638      	mov	r0, r7
 8003718:	f7ff ffc0 	bl	800369c <sbrk_aligned>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	4604      	mov	r4, r0
 8003720:	d155      	bne.n	80037ce <_malloc_r+0xf2>
 8003722:	f8d8 4000 	ldr.w	r4, [r8]
 8003726:	4626      	mov	r6, r4
 8003728:	2e00      	cmp	r6, #0
 800372a:	d145      	bne.n	80037b8 <_malloc_r+0xdc>
 800372c:	2c00      	cmp	r4, #0
 800372e:	d048      	beq.n	80037c2 <_malloc_r+0xe6>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	4631      	mov	r1, r6
 8003734:	4638      	mov	r0, r7
 8003736:	eb04 0903 	add.w	r9, r4, r3
 800373a:	f000 fb61 	bl	8003e00 <_sbrk_r>
 800373e:	4581      	cmp	r9, r0
 8003740:	d13f      	bne.n	80037c2 <_malloc_r+0xe6>
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	4638      	mov	r0, r7
 8003746:	1a6d      	subs	r5, r5, r1
 8003748:	4629      	mov	r1, r5
 800374a:	f7ff ffa7 	bl	800369c <sbrk_aligned>
 800374e:	3001      	adds	r0, #1
 8003750:	d037      	beq.n	80037c2 <_malloc_r+0xe6>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	442b      	add	r3, r5
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	f8d8 3000 	ldr.w	r3, [r8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d038      	beq.n	80037d2 <_malloc_r+0xf6>
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	42a2      	cmp	r2, r4
 8003764:	d12b      	bne.n	80037be <_malloc_r+0xe2>
 8003766:	2200      	movs	r2, #0
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e00f      	b.n	800378c <_malloc_r+0xb0>
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	1b52      	subs	r2, r2, r5
 8003770:	d41f      	bmi.n	80037b2 <_malloc_r+0xd6>
 8003772:	2a0b      	cmp	r2, #11
 8003774:	d917      	bls.n	80037a6 <_malloc_r+0xca>
 8003776:	1961      	adds	r1, r4, r5
 8003778:	42a3      	cmp	r3, r4
 800377a:	6025      	str	r5, [r4, #0]
 800377c:	bf18      	it	ne
 800377e:	6059      	strne	r1, [r3, #4]
 8003780:	6863      	ldr	r3, [r4, #4]
 8003782:	bf08      	it	eq
 8003784:	f8c8 1000 	streq.w	r1, [r8]
 8003788:	5162      	str	r2, [r4, r5]
 800378a:	604b      	str	r3, [r1, #4]
 800378c:	4638      	mov	r0, r7
 800378e:	f104 060b 	add.w	r6, r4, #11
 8003792:	f000 f829 	bl	80037e8 <__malloc_unlock>
 8003796:	f026 0607 	bic.w	r6, r6, #7
 800379a:	1d23      	adds	r3, r4, #4
 800379c:	1af2      	subs	r2, r6, r3
 800379e:	d0ae      	beq.n	80036fe <_malloc_r+0x22>
 80037a0:	1b9b      	subs	r3, r3, r6
 80037a2:	50a3      	str	r3, [r4, r2]
 80037a4:	e7ab      	b.n	80036fe <_malloc_r+0x22>
 80037a6:	42a3      	cmp	r3, r4
 80037a8:	6862      	ldr	r2, [r4, #4]
 80037aa:	d1dd      	bne.n	8003768 <_malloc_r+0x8c>
 80037ac:	f8c8 2000 	str.w	r2, [r8]
 80037b0:	e7ec      	b.n	800378c <_malloc_r+0xb0>
 80037b2:	4623      	mov	r3, r4
 80037b4:	6864      	ldr	r4, [r4, #4]
 80037b6:	e7ac      	b.n	8003712 <_malloc_r+0x36>
 80037b8:	4634      	mov	r4, r6
 80037ba:	6876      	ldr	r6, [r6, #4]
 80037bc:	e7b4      	b.n	8003728 <_malloc_r+0x4c>
 80037be:	4613      	mov	r3, r2
 80037c0:	e7cc      	b.n	800375c <_malloc_r+0x80>
 80037c2:	230c      	movs	r3, #12
 80037c4:	4638      	mov	r0, r7
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	f000 f80e 	bl	80037e8 <__malloc_unlock>
 80037cc:	e797      	b.n	80036fe <_malloc_r+0x22>
 80037ce:	6025      	str	r5, [r4, #0]
 80037d0:	e7dc      	b.n	800378c <_malloc_r+0xb0>
 80037d2:	605b      	str	r3, [r3, #4]
 80037d4:	deff      	udf	#255	; 0xff
 80037d6:	bf00      	nop
 80037d8:	20000260 	.word	0x20000260

080037dc <__malloc_lock>:
 80037dc:	4801      	ldr	r0, [pc, #4]	; (80037e4 <__malloc_lock+0x8>)
 80037de:	f7ff bf13 	b.w	8003608 <__retarget_lock_acquire_recursive>
 80037e2:	bf00      	nop
 80037e4:	2000025c 	.word	0x2000025c

080037e8 <__malloc_unlock>:
 80037e8:	4801      	ldr	r0, [pc, #4]	; (80037f0 <__malloc_unlock+0x8>)
 80037ea:	f7ff bf0e 	b.w	800360a <__retarget_lock_release_recursive>
 80037ee:	bf00      	nop
 80037f0:	2000025c 	.word	0x2000025c

080037f4 <__ssputs_r>:
 80037f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	461f      	mov	r7, r3
 80037fa:	688e      	ldr	r6, [r1, #8]
 80037fc:	4682      	mov	sl, r0
 80037fe:	42be      	cmp	r6, r7
 8003800:	460c      	mov	r4, r1
 8003802:	4690      	mov	r8, r2
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	d82c      	bhi.n	8003862 <__ssputs_r+0x6e>
 8003808:	898a      	ldrh	r2, [r1, #12]
 800380a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800380e:	d026      	beq.n	800385e <__ssputs_r+0x6a>
 8003810:	6965      	ldr	r5, [r4, #20]
 8003812:	6909      	ldr	r1, [r1, #16]
 8003814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003818:	eba3 0901 	sub.w	r9, r3, r1
 800381c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003820:	1c7b      	adds	r3, r7, #1
 8003822:	444b      	add	r3, r9
 8003824:	106d      	asrs	r5, r5, #1
 8003826:	429d      	cmp	r5, r3
 8003828:	bf38      	it	cc
 800382a:	461d      	movcc	r5, r3
 800382c:	0553      	lsls	r3, r2, #21
 800382e:	d527      	bpl.n	8003880 <__ssputs_r+0x8c>
 8003830:	4629      	mov	r1, r5
 8003832:	f7ff ff53 	bl	80036dc <_malloc_r>
 8003836:	4606      	mov	r6, r0
 8003838:	b360      	cbz	r0, 8003894 <__ssputs_r+0xa0>
 800383a:	464a      	mov	r2, r9
 800383c:	6921      	ldr	r1, [r4, #16]
 800383e:	f000 fafd 	bl	8003e3c <memcpy>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	6126      	str	r6, [r4, #16]
 8003850:	444e      	add	r6, r9
 8003852:	6026      	str	r6, [r4, #0]
 8003854:	463e      	mov	r6, r7
 8003856:	6165      	str	r5, [r4, #20]
 8003858:	eba5 0509 	sub.w	r5, r5, r9
 800385c:	60a5      	str	r5, [r4, #8]
 800385e:	42be      	cmp	r6, r7
 8003860:	d900      	bls.n	8003864 <__ssputs_r+0x70>
 8003862:	463e      	mov	r6, r7
 8003864:	4632      	mov	r2, r6
 8003866:	4641      	mov	r1, r8
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f000 faaf 	bl	8003dcc <memmove>
 800386e:	2000      	movs	r0, #0
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	1b9b      	subs	r3, r3, r6
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	4433      	add	r3, r6
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003880:	462a      	mov	r2, r5
 8003882:	f000 fae9 	bl	8003e58 <_realloc_r>
 8003886:	4606      	mov	r6, r0
 8003888:	2800      	cmp	r0, #0
 800388a:	d1e0      	bne.n	800384e <__ssputs_r+0x5a>
 800388c:	4650      	mov	r0, sl
 800388e:	6921      	ldr	r1, [r4, #16]
 8003890:	f7ff febc 	bl	800360c <_free_r>
 8003894:	230c      	movs	r3, #12
 8003896:	f8ca 3000 	str.w	r3, [sl]
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	e7e9      	b.n	800387c <__ssputs_r+0x88>

080038a8 <_svfiprintf_r>:
 80038a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ac:	4698      	mov	r8, r3
 80038ae:	898b      	ldrh	r3, [r1, #12]
 80038b0:	4607      	mov	r7, r0
 80038b2:	061b      	lsls	r3, r3, #24
 80038b4:	460d      	mov	r5, r1
 80038b6:	4614      	mov	r4, r2
 80038b8:	b09d      	sub	sp, #116	; 0x74
 80038ba:	d50e      	bpl.n	80038da <_svfiprintf_r+0x32>
 80038bc:	690b      	ldr	r3, [r1, #16]
 80038be:	b963      	cbnz	r3, 80038da <_svfiprintf_r+0x32>
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	f7ff ff0b 	bl	80036dc <_malloc_r>
 80038c6:	6028      	str	r0, [r5, #0]
 80038c8:	6128      	str	r0, [r5, #16]
 80038ca:	b920      	cbnz	r0, 80038d6 <_svfiprintf_r+0x2e>
 80038cc:	230c      	movs	r3, #12
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	e0d0      	b.n	8003a78 <_svfiprintf_r+0x1d0>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	616b      	str	r3, [r5, #20]
 80038da:	2300      	movs	r3, #0
 80038dc:	9309      	str	r3, [sp, #36]	; 0x24
 80038de:	2320      	movs	r3, #32
 80038e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038e4:	2330      	movs	r3, #48	; 0x30
 80038e6:	f04f 0901 	mov.w	r9, #1
 80038ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80038ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003a90 <_svfiprintf_r+0x1e8>
 80038f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038f6:	4623      	mov	r3, r4
 80038f8:	469a      	mov	sl, r3
 80038fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038fe:	b10a      	cbz	r2, 8003904 <_svfiprintf_r+0x5c>
 8003900:	2a25      	cmp	r2, #37	; 0x25
 8003902:	d1f9      	bne.n	80038f8 <_svfiprintf_r+0x50>
 8003904:	ebba 0b04 	subs.w	fp, sl, r4
 8003908:	d00b      	beq.n	8003922 <_svfiprintf_r+0x7a>
 800390a:	465b      	mov	r3, fp
 800390c:	4622      	mov	r2, r4
 800390e:	4629      	mov	r1, r5
 8003910:	4638      	mov	r0, r7
 8003912:	f7ff ff6f 	bl	80037f4 <__ssputs_r>
 8003916:	3001      	adds	r0, #1
 8003918:	f000 80a9 	beq.w	8003a6e <_svfiprintf_r+0x1c6>
 800391c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800391e:	445a      	add	r2, fp
 8003920:	9209      	str	r2, [sp, #36]	; 0x24
 8003922:	f89a 3000 	ldrb.w	r3, [sl]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80a1 	beq.w	8003a6e <_svfiprintf_r+0x1c6>
 800392c:	2300      	movs	r3, #0
 800392e:	f04f 32ff 	mov.w	r2, #4294967295
 8003932:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003936:	f10a 0a01 	add.w	sl, sl, #1
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	9307      	str	r3, [sp, #28]
 800393e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003942:	931a      	str	r3, [sp, #104]	; 0x68
 8003944:	4654      	mov	r4, sl
 8003946:	2205      	movs	r2, #5
 8003948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800394c:	4850      	ldr	r0, [pc, #320]	; (8003a90 <_svfiprintf_r+0x1e8>)
 800394e:	f000 fa67 	bl	8003e20 <memchr>
 8003952:	9a04      	ldr	r2, [sp, #16]
 8003954:	b9d8      	cbnz	r0, 800398e <_svfiprintf_r+0xe6>
 8003956:	06d0      	lsls	r0, r2, #27
 8003958:	bf44      	itt	mi
 800395a:	2320      	movmi	r3, #32
 800395c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003960:	0711      	lsls	r1, r2, #28
 8003962:	bf44      	itt	mi
 8003964:	232b      	movmi	r3, #43	; 0x2b
 8003966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800396a:	f89a 3000 	ldrb.w	r3, [sl]
 800396e:	2b2a      	cmp	r3, #42	; 0x2a
 8003970:	d015      	beq.n	800399e <_svfiprintf_r+0xf6>
 8003972:	4654      	mov	r4, sl
 8003974:	2000      	movs	r0, #0
 8003976:	f04f 0c0a 	mov.w	ip, #10
 800397a:	9a07      	ldr	r2, [sp, #28]
 800397c:	4621      	mov	r1, r4
 800397e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003982:	3b30      	subs	r3, #48	; 0x30
 8003984:	2b09      	cmp	r3, #9
 8003986:	d94d      	bls.n	8003a24 <_svfiprintf_r+0x17c>
 8003988:	b1b0      	cbz	r0, 80039b8 <_svfiprintf_r+0x110>
 800398a:	9207      	str	r2, [sp, #28]
 800398c:	e014      	b.n	80039b8 <_svfiprintf_r+0x110>
 800398e:	eba0 0308 	sub.w	r3, r0, r8
 8003992:	fa09 f303 	lsl.w	r3, r9, r3
 8003996:	4313      	orrs	r3, r2
 8003998:	46a2      	mov	sl, r4
 800399a:	9304      	str	r3, [sp, #16]
 800399c:	e7d2      	b.n	8003944 <_svfiprintf_r+0x9c>
 800399e:	9b03      	ldr	r3, [sp, #12]
 80039a0:	1d19      	adds	r1, r3, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	9103      	str	r1, [sp, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bfbb      	ittet	lt
 80039aa:	425b      	neglt	r3, r3
 80039ac:	f042 0202 	orrlt.w	r2, r2, #2
 80039b0:	9307      	strge	r3, [sp, #28]
 80039b2:	9307      	strlt	r3, [sp, #28]
 80039b4:	bfb8      	it	lt
 80039b6:	9204      	strlt	r2, [sp, #16]
 80039b8:	7823      	ldrb	r3, [r4, #0]
 80039ba:	2b2e      	cmp	r3, #46	; 0x2e
 80039bc:	d10c      	bne.n	80039d8 <_svfiprintf_r+0x130>
 80039be:	7863      	ldrb	r3, [r4, #1]
 80039c0:	2b2a      	cmp	r3, #42	; 0x2a
 80039c2:	d134      	bne.n	8003a2e <_svfiprintf_r+0x186>
 80039c4:	9b03      	ldr	r3, [sp, #12]
 80039c6:	3402      	adds	r4, #2
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	9203      	str	r2, [sp, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bfb8      	it	lt
 80039d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80039d6:	9305      	str	r3, [sp, #20]
 80039d8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003a94 <_svfiprintf_r+0x1ec>
 80039dc:	2203      	movs	r2, #3
 80039de:	4650      	mov	r0, sl
 80039e0:	7821      	ldrb	r1, [r4, #0]
 80039e2:	f000 fa1d 	bl	8003e20 <memchr>
 80039e6:	b138      	cbz	r0, 80039f8 <_svfiprintf_r+0x150>
 80039e8:	2240      	movs	r2, #64	; 0x40
 80039ea:	9b04      	ldr	r3, [sp, #16]
 80039ec:	eba0 000a 	sub.w	r0, r0, sl
 80039f0:	4082      	lsls	r2, r0
 80039f2:	4313      	orrs	r3, r2
 80039f4:	3401      	adds	r4, #1
 80039f6:	9304      	str	r3, [sp, #16]
 80039f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fc:	2206      	movs	r2, #6
 80039fe:	4826      	ldr	r0, [pc, #152]	; (8003a98 <_svfiprintf_r+0x1f0>)
 8003a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a04:	f000 fa0c 	bl	8003e20 <memchr>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d038      	beq.n	8003a7e <_svfiprintf_r+0x1d6>
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <_svfiprintf_r+0x1f4>)
 8003a0e:	bb1b      	cbnz	r3, 8003a58 <_svfiprintf_r+0x1b0>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	3307      	adds	r3, #7
 8003a14:	f023 0307 	bic.w	r3, r3, #7
 8003a18:	3308      	adds	r3, #8
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1e:	4433      	add	r3, r6
 8003a20:	9309      	str	r3, [sp, #36]	; 0x24
 8003a22:	e768      	b.n	80038f6 <_svfiprintf_r+0x4e>
 8003a24:	460c      	mov	r4, r1
 8003a26:	2001      	movs	r0, #1
 8003a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a2c:	e7a6      	b.n	800397c <_svfiprintf_r+0xd4>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f04f 0c0a 	mov.w	ip, #10
 8003a34:	4619      	mov	r1, r3
 8003a36:	3401      	adds	r4, #1
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	4620      	mov	r0, r4
 8003a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a40:	3a30      	subs	r2, #48	; 0x30
 8003a42:	2a09      	cmp	r2, #9
 8003a44:	d903      	bls.n	8003a4e <_svfiprintf_r+0x1a6>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0c6      	beq.n	80039d8 <_svfiprintf_r+0x130>
 8003a4a:	9105      	str	r1, [sp, #20]
 8003a4c:	e7c4      	b.n	80039d8 <_svfiprintf_r+0x130>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	2301      	movs	r3, #1
 8003a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a56:	e7f0      	b.n	8003a3a <_svfiprintf_r+0x192>
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	4638      	mov	r0, r7
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <_svfiprintf_r+0x1f8>)
 8003a62:	a904      	add	r1, sp, #16
 8003a64:	f3af 8000 	nop.w
 8003a68:	1c42      	adds	r2, r0, #1
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	d1d6      	bne.n	8003a1c <_svfiprintf_r+0x174>
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	f53f af2d 	bmi.w	80038d0 <_svfiprintf_r+0x28>
 8003a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a78:	b01d      	add	sp, #116	; 0x74
 8003a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7e:	ab03      	add	r3, sp, #12
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	462a      	mov	r2, r5
 8003a84:	4638      	mov	r0, r7
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <_svfiprintf_r+0x1f8>)
 8003a88:	a904      	add	r1, sp, #16
 8003a8a:	f000 f87d 	bl	8003b88 <_printf_i>
 8003a8e:	e7eb      	b.n	8003a68 <_svfiprintf_r+0x1c0>
 8003a90:	08004116 	.word	0x08004116
 8003a94:	0800411c 	.word	0x0800411c
 8003a98:	08004120 	.word	0x08004120
 8003a9c:	00000000 	.word	0x00000000
 8003aa0:	080037f5 	.word	0x080037f5

08003aa4 <_printf_common>:
 8003aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aa8:	4616      	mov	r6, r2
 8003aaa:	4699      	mov	r9, r3
 8003aac:	688a      	ldr	r2, [r1, #8]
 8003aae:	690b      	ldr	r3, [r1, #16]
 8003ab0:	4607      	mov	r7, r0
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bfb8      	it	lt
 8003ab6:	4613      	movlt	r3, r2
 8003ab8:	6033      	str	r3, [r6, #0]
 8003aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003abe:	460c      	mov	r4, r1
 8003ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac4:	b10a      	cbz	r2, 8003aca <_printf_common+0x26>
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	6033      	str	r3, [r6, #0]
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	0699      	lsls	r1, r3, #26
 8003ace:	bf42      	ittt	mi
 8003ad0:	6833      	ldrmi	r3, [r6, #0]
 8003ad2:	3302      	addmi	r3, #2
 8003ad4:	6033      	strmi	r3, [r6, #0]
 8003ad6:	6825      	ldr	r5, [r4, #0]
 8003ad8:	f015 0506 	ands.w	r5, r5, #6
 8003adc:	d106      	bne.n	8003aec <_printf_common+0x48>
 8003ade:	f104 0a19 	add.w	sl, r4, #25
 8003ae2:	68e3      	ldr	r3, [r4, #12]
 8003ae4:	6832      	ldr	r2, [r6, #0]
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	42ab      	cmp	r3, r5
 8003aea:	dc2b      	bgt.n	8003b44 <_printf_common+0xa0>
 8003aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003af0:	1e13      	subs	r3, r2, #0
 8003af2:	6822      	ldr	r2, [r4, #0]
 8003af4:	bf18      	it	ne
 8003af6:	2301      	movne	r3, #1
 8003af8:	0692      	lsls	r2, r2, #26
 8003afa:	d430      	bmi.n	8003b5e <_printf_common+0xba>
 8003afc:	4649      	mov	r1, r9
 8003afe:	4638      	mov	r0, r7
 8003b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b04:	47c0      	blx	r8
 8003b06:	3001      	adds	r0, #1
 8003b08:	d023      	beq.n	8003b52 <_printf_common+0xae>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	6922      	ldr	r2, [r4, #16]
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	bf14      	ite	ne
 8003b16:	2500      	movne	r5, #0
 8003b18:	6833      	ldreq	r3, [r6, #0]
 8003b1a:	f04f 0600 	mov.w	r6, #0
 8003b1e:	bf08      	it	eq
 8003b20:	68e5      	ldreq	r5, [r4, #12]
 8003b22:	f104 041a 	add.w	r4, r4, #26
 8003b26:	bf08      	it	eq
 8003b28:	1aed      	subeq	r5, r5, r3
 8003b2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b2e:	bf08      	it	eq
 8003b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bfc4      	itt	gt
 8003b38:	1a9b      	subgt	r3, r3, r2
 8003b3a:	18ed      	addgt	r5, r5, r3
 8003b3c:	42b5      	cmp	r5, r6
 8003b3e:	d11a      	bne.n	8003b76 <_printf_common+0xd2>
 8003b40:	2000      	movs	r0, #0
 8003b42:	e008      	b.n	8003b56 <_printf_common+0xb2>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4652      	mov	r2, sl
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d103      	bne.n	8003b5a <_printf_common+0xb6>
 8003b52:	f04f 30ff 	mov.w	r0, #4294967295
 8003b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	e7c1      	b.n	8003ae2 <_printf_common+0x3e>
 8003b5e:	2030      	movs	r0, #48	; 0x30
 8003b60:	18e1      	adds	r1, r4, r3
 8003b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b6c:	4422      	add	r2, r4
 8003b6e:	3302      	adds	r3, #2
 8003b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b74:	e7c2      	b.n	8003afc <_printf_common+0x58>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d0e6      	beq.n	8003b52 <_printf_common+0xae>
 8003b84:	3601      	adds	r6, #1
 8003b86:	e7d9      	b.n	8003b3c <_printf_common+0x98>

08003b88 <_printf_i>:
 8003b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	7e0f      	ldrb	r7, [r1, #24]
 8003b8e:	4691      	mov	r9, r2
 8003b90:	2f78      	cmp	r7, #120	; 0x78
 8003b92:	4680      	mov	r8, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	469a      	mov	sl, r3
 8003b98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b9e:	d807      	bhi.n	8003bb0 <_printf_i+0x28>
 8003ba0:	2f62      	cmp	r7, #98	; 0x62
 8003ba2:	d80a      	bhi.n	8003bba <_printf_i+0x32>
 8003ba4:	2f00      	cmp	r7, #0
 8003ba6:	f000 80d5 	beq.w	8003d54 <_printf_i+0x1cc>
 8003baa:	2f58      	cmp	r7, #88	; 0x58
 8003bac:	f000 80c1 	beq.w	8003d32 <_printf_i+0x1aa>
 8003bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bb8:	e03a      	b.n	8003c30 <_printf_i+0xa8>
 8003bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bbe:	2b15      	cmp	r3, #21
 8003bc0:	d8f6      	bhi.n	8003bb0 <_printf_i+0x28>
 8003bc2:	a101      	add	r1, pc, #4	; (adr r1, 8003bc8 <_printf_i+0x40>)
 8003bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003bb1 	.word	0x08003bb1
 8003bd4:	08003bb1 	.word	0x08003bb1
 8003bd8:	08003bb1 	.word	0x08003bb1
 8003bdc:	08003bb1 	.word	0x08003bb1
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003bb1 	.word	0x08003bb1
 8003be8:	08003bb1 	.word	0x08003bb1
 8003bec:	08003bb1 	.word	0x08003bb1
 8003bf0:	08003bb1 	.word	0x08003bb1
 8003bf4:	08003d3b 	.word	0x08003d3b
 8003bf8:	08003c61 	.word	0x08003c61
 8003bfc:	08003cf5 	.word	0x08003cf5
 8003c00:	08003bb1 	.word	0x08003bb1
 8003c04:	08003bb1 	.word	0x08003bb1
 8003c08:	08003d5d 	.word	0x08003d5d
 8003c0c:	08003bb1 	.word	0x08003bb1
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003bb1 	.word	0x08003bb1
 8003c18:	08003bb1 	.word	0x08003bb1
 8003c1c:	08003cfd 	.word	0x08003cfd
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	1d1a      	adds	r2, r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	602a      	str	r2, [r5, #0]
 8003c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0a0      	b.n	8003d76 <_printf_i+0x1ee>
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	0607      	lsls	r7, r0, #24
 8003c3a:	f103 0104 	add.w	r1, r3, #4
 8003c3e:	6029      	str	r1, [r5, #0]
 8003c40:	d501      	bpl.n	8003c46 <_printf_i+0xbe>
 8003c42:	681e      	ldr	r6, [r3, #0]
 8003c44:	e003      	b.n	8003c4e <_printf_i+0xc6>
 8003c46:	0646      	lsls	r6, r0, #25
 8003c48:	d5fb      	bpl.n	8003c42 <_printf_i+0xba>
 8003c4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c4e:	2e00      	cmp	r6, #0
 8003c50:	da03      	bge.n	8003c5a <_printf_i+0xd2>
 8003c52:	232d      	movs	r3, #45	; 0x2d
 8003c54:	4276      	negs	r6, r6
 8003c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5a:	230a      	movs	r3, #10
 8003c5c:	4859      	ldr	r0, [pc, #356]	; (8003dc4 <_printf_i+0x23c>)
 8003c5e:	e012      	b.n	8003c86 <_printf_i+0xfe>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	1d19      	adds	r1, r3, #4
 8003c66:	6029      	str	r1, [r5, #0]
 8003c68:	0605      	lsls	r5, r0, #24
 8003c6a:	d501      	bpl.n	8003c70 <_printf_i+0xe8>
 8003c6c:	681e      	ldr	r6, [r3, #0]
 8003c6e:	e002      	b.n	8003c76 <_printf_i+0xee>
 8003c70:	0641      	lsls	r1, r0, #25
 8003c72:	d5fb      	bpl.n	8003c6c <_printf_i+0xe4>
 8003c74:	881e      	ldrh	r6, [r3, #0]
 8003c76:	2f6f      	cmp	r7, #111	; 0x6f
 8003c78:	bf0c      	ite	eq
 8003c7a:	2308      	moveq	r3, #8
 8003c7c:	230a      	movne	r3, #10
 8003c7e:	4851      	ldr	r0, [pc, #324]	; (8003dc4 <_printf_i+0x23c>)
 8003c80:	2100      	movs	r1, #0
 8003c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c86:	6865      	ldr	r5, [r4, #4]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	bfa8      	it	ge
 8003c8c:	6821      	ldrge	r1, [r4, #0]
 8003c8e:	60a5      	str	r5, [r4, #8]
 8003c90:	bfa4      	itt	ge
 8003c92:	f021 0104 	bicge.w	r1, r1, #4
 8003c96:	6021      	strge	r1, [r4, #0]
 8003c98:	b90e      	cbnz	r6, 8003c9e <_printf_i+0x116>
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	d04b      	beq.n	8003d36 <_printf_i+0x1ae>
 8003c9e:	4615      	mov	r5, r2
 8003ca0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ca4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ca8:	5dc7      	ldrb	r7, [r0, r7]
 8003caa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cae:	4637      	mov	r7, r6
 8003cb0:	42bb      	cmp	r3, r7
 8003cb2:	460e      	mov	r6, r1
 8003cb4:	d9f4      	bls.n	8003ca0 <_printf_i+0x118>
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d10b      	bne.n	8003cd2 <_printf_i+0x14a>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	07de      	lsls	r6, r3, #31
 8003cbe:	d508      	bpl.n	8003cd2 <_printf_i+0x14a>
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	6861      	ldr	r1, [r4, #4]
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	bfde      	ittt	le
 8003cc8:	2330      	movle	r3, #48	; 0x30
 8003cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cd2:	1b52      	subs	r2, r2, r5
 8003cd4:	6122      	str	r2, [r4, #16]
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4640      	mov	r0, r8
 8003cdc:	f8cd a000 	str.w	sl, [sp]
 8003ce0:	aa03      	add	r2, sp, #12
 8003ce2:	f7ff fedf 	bl	8003aa4 <_printf_common>
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d14a      	bne.n	8003d80 <_printf_i+0x1f8>
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	b004      	add	sp, #16
 8003cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	f043 0320 	orr.w	r3, r3, #32
 8003cfa:	6023      	str	r3, [r4, #0]
 8003cfc:	2778      	movs	r7, #120	; 0x78
 8003cfe:	4832      	ldr	r0, [pc, #200]	; (8003dc8 <_printf_i+0x240>)
 8003d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	6829      	ldr	r1, [r5, #0]
 8003d08:	061f      	lsls	r7, r3, #24
 8003d0a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d0e:	d402      	bmi.n	8003d16 <_printf_i+0x18e>
 8003d10:	065f      	lsls	r7, r3, #25
 8003d12:	bf48      	it	mi
 8003d14:	b2b6      	uxthmi	r6, r6
 8003d16:	07df      	lsls	r7, r3, #31
 8003d18:	bf48      	it	mi
 8003d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1e:	6029      	str	r1, [r5, #0]
 8003d20:	bf48      	it	mi
 8003d22:	6023      	strmi	r3, [r4, #0]
 8003d24:	b91e      	cbnz	r6, 8003d2e <_printf_i+0x1a6>
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f023 0320 	bic.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	2310      	movs	r3, #16
 8003d30:	e7a6      	b.n	8003c80 <_printf_i+0xf8>
 8003d32:	4824      	ldr	r0, [pc, #144]	; (8003dc4 <_printf_i+0x23c>)
 8003d34:	e7e4      	b.n	8003d00 <_printf_i+0x178>
 8003d36:	4615      	mov	r5, r2
 8003d38:	e7bd      	b.n	8003cb6 <_printf_i+0x12e>
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	6826      	ldr	r6, [r4, #0]
 8003d3e:	1d18      	adds	r0, r3, #4
 8003d40:	6961      	ldr	r1, [r4, #20]
 8003d42:	6028      	str	r0, [r5, #0]
 8003d44:	0635      	lsls	r5, r6, #24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	d501      	bpl.n	8003d4e <_printf_i+0x1c6>
 8003d4a:	6019      	str	r1, [r3, #0]
 8003d4c:	e002      	b.n	8003d54 <_printf_i+0x1cc>
 8003d4e:	0670      	lsls	r0, r6, #25
 8003d50:	d5fb      	bpl.n	8003d4a <_printf_i+0x1c2>
 8003d52:	8019      	strh	r1, [r3, #0]
 8003d54:	2300      	movs	r3, #0
 8003d56:	4615      	mov	r5, r2
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	e7bc      	b.n	8003cd6 <_printf_i+0x14e>
 8003d5c:	682b      	ldr	r3, [r5, #0]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	602a      	str	r2, [r5, #0]
 8003d64:	681d      	ldr	r5, [r3, #0]
 8003d66:	6862      	ldr	r2, [r4, #4]
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f859 	bl	8003e20 <memchr>
 8003d6e:	b108      	cbz	r0, 8003d74 <_printf_i+0x1ec>
 8003d70:	1b40      	subs	r0, r0, r5
 8003d72:	6060      	str	r0, [r4, #4]
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	6123      	str	r3, [r4, #16]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7e:	e7aa      	b.n	8003cd6 <_printf_i+0x14e>
 8003d80:	462a      	mov	r2, r5
 8003d82:	4649      	mov	r1, r9
 8003d84:	4640      	mov	r0, r8
 8003d86:	6923      	ldr	r3, [r4, #16]
 8003d88:	47d0      	blx	sl
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d0ad      	beq.n	8003cea <_printf_i+0x162>
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	079b      	lsls	r3, r3, #30
 8003d92:	d413      	bmi.n	8003dbc <_printf_i+0x234>
 8003d94:	68e0      	ldr	r0, [r4, #12]
 8003d96:	9b03      	ldr	r3, [sp, #12]
 8003d98:	4298      	cmp	r0, r3
 8003d9a:	bfb8      	it	lt
 8003d9c:	4618      	movlt	r0, r3
 8003d9e:	e7a6      	b.n	8003cee <_printf_i+0x166>
 8003da0:	2301      	movs	r3, #1
 8003da2:	4632      	mov	r2, r6
 8003da4:	4649      	mov	r1, r9
 8003da6:	4640      	mov	r0, r8
 8003da8:	47d0      	blx	sl
 8003daa:	3001      	adds	r0, #1
 8003dac:	d09d      	beq.n	8003cea <_printf_i+0x162>
 8003dae:	3501      	adds	r5, #1
 8003db0:	68e3      	ldr	r3, [r4, #12]
 8003db2:	9903      	ldr	r1, [sp, #12]
 8003db4:	1a5b      	subs	r3, r3, r1
 8003db6:	42ab      	cmp	r3, r5
 8003db8:	dcf2      	bgt.n	8003da0 <_printf_i+0x218>
 8003dba:	e7eb      	b.n	8003d94 <_printf_i+0x20c>
 8003dbc:	2500      	movs	r5, #0
 8003dbe:	f104 0619 	add.w	r6, r4, #25
 8003dc2:	e7f5      	b.n	8003db0 <_printf_i+0x228>
 8003dc4:	08004127 	.word	0x08004127
 8003dc8:	08004138 	.word	0x08004138

08003dcc <memmove>:
 8003dcc:	4288      	cmp	r0, r1
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	eb01 0402 	add.w	r4, r1, r2
 8003dd4:	d902      	bls.n	8003ddc <memmove+0x10>
 8003dd6:	4284      	cmp	r4, r0
 8003dd8:	4623      	mov	r3, r4
 8003dda:	d807      	bhi.n	8003dec <memmove+0x20>
 8003ddc:	1e43      	subs	r3, r0, #1
 8003dde:	42a1      	cmp	r1, r4
 8003de0:	d008      	beq.n	8003df4 <memmove+0x28>
 8003de2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dea:	e7f8      	b.n	8003dde <memmove+0x12>
 8003dec:	4601      	mov	r1, r0
 8003dee:	4402      	add	r2, r0
 8003df0:	428a      	cmp	r2, r1
 8003df2:	d100      	bne.n	8003df6 <memmove+0x2a>
 8003df4:	bd10      	pop	{r4, pc}
 8003df6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003dfe:	e7f7      	b.n	8003df0 <memmove+0x24>

08003e00 <_sbrk_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	2300      	movs	r3, #0
 8003e04:	4d05      	ldr	r5, [pc, #20]	; (8003e1c <_sbrk_r+0x1c>)
 8003e06:	4604      	mov	r4, r0
 8003e08:	4608      	mov	r0, r1
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	f7fd f9e6 	bl	80011dc <_sbrk>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	d102      	bne.n	8003e1a <_sbrk_r+0x1a>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b103      	cbz	r3, 8003e1a <_sbrk_r+0x1a>
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	bd38      	pop	{r3, r4, r5, pc}
 8003e1c:	20000258 	.word	0x20000258

08003e20 <memchr>:
 8003e20:	4603      	mov	r3, r0
 8003e22:	b510      	push	{r4, lr}
 8003e24:	b2c9      	uxtb	r1, r1
 8003e26:	4402      	add	r2, r0
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	d101      	bne.n	8003e32 <memchr+0x12>
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e003      	b.n	8003e3a <memchr+0x1a>
 8003e32:	7804      	ldrb	r4, [r0, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	428c      	cmp	r4, r1
 8003e38:	d1f6      	bne.n	8003e28 <memchr+0x8>
 8003e3a:	bd10      	pop	{r4, pc}

08003e3c <memcpy>:
 8003e3c:	440a      	add	r2, r1
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e44:	d100      	bne.n	8003e48 <memcpy+0xc>
 8003e46:	4770      	bx	lr
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e4e:	4291      	cmp	r1, r2
 8003e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e54:	d1f9      	bne.n	8003e4a <memcpy+0xe>
 8003e56:	bd10      	pop	{r4, pc}

08003e58 <_realloc_r>:
 8003e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e5c:	4680      	mov	r8, r0
 8003e5e:	4614      	mov	r4, r2
 8003e60:	460e      	mov	r6, r1
 8003e62:	b921      	cbnz	r1, 8003e6e <_realloc_r+0x16>
 8003e64:	4611      	mov	r1, r2
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f7ff bc37 	b.w	80036dc <_malloc_r>
 8003e6e:	b92a      	cbnz	r2, 8003e7c <_realloc_r+0x24>
 8003e70:	f7ff fbcc 	bl	800360c <_free_r>
 8003e74:	4625      	mov	r5, r4
 8003e76:	4628      	mov	r0, r5
 8003e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e7c:	f000 f81b 	bl	8003eb6 <_malloc_usable_size_r>
 8003e80:	4284      	cmp	r4, r0
 8003e82:	4607      	mov	r7, r0
 8003e84:	d802      	bhi.n	8003e8c <_realloc_r+0x34>
 8003e86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e8a:	d812      	bhi.n	8003eb2 <_realloc_r+0x5a>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4640      	mov	r0, r8
 8003e90:	f7ff fc24 	bl	80036dc <_malloc_r>
 8003e94:	4605      	mov	r5, r0
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d0ed      	beq.n	8003e76 <_realloc_r+0x1e>
 8003e9a:	42bc      	cmp	r4, r7
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4631      	mov	r1, r6
 8003ea0:	bf28      	it	cs
 8003ea2:	463a      	movcs	r2, r7
 8003ea4:	f7ff ffca 	bl	8003e3c <memcpy>
 8003ea8:	4631      	mov	r1, r6
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f7ff fbae 	bl	800360c <_free_r>
 8003eb0:	e7e1      	b.n	8003e76 <_realloc_r+0x1e>
 8003eb2:	4635      	mov	r5, r6
 8003eb4:	e7df      	b.n	8003e76 <_realloc_r+0x1e>

08003eb6 <_malloc_usable_size_r>:
 8003eb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eba:	1f18      	subs	r0, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bfbc      	itt	lt
 8003ec0:	580b      	ldrlt	r3, [r1, r0]
 8003ec2:	18c0      	addlt	r0, r0, r3
 8003ec4:	4770      	bx	lr
	...

08003ec8 <_init>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr

08003ed4 <_fini>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr
